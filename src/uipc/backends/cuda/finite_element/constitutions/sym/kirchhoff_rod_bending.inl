
template <typename T>
__host__ __device__ void E(T& R, const T& k, const Eigen::Vector<T,9>& X, const T& L0, const T& r, const T& pi)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
Symbol Name Mapping:
k:
    -> {}
    -> Matrix([[k]])
X:
    -> {}
    -> Matrix([[X(0)], [X(1)], [X(2)], [X(3)], [X(4)], [X(5)], [X(6)], [X(7)], [X(8)]])
L0:
    -> {}
    -> Matrix([[L0]])
r:
    -> {}
    -> Matrix([[r]])
pi:
    -> {}
    -> Matrix([[pi]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = -X(4) + X(7);
auto x1 = -X(0) + X(3);
auto x2 = 2*x1;
auto x3 = -X(1) + X(4);
auto x4 = -X(3) + X(6);
auto x5 = -X(2) + X(5);
auto x6 = -X(5) + X(8);
auto x7 = std::pow(x0*x3 + x1*x4 + x5*x6 + std::pow((std::pow(x0, 2) + std::pow(x4, 2) + std::pow(x6, 2))*(std::pow(x1, 2) + std::pow(x3, 2) + std::pow(x5, 2)), 1.0/2.0), -2);
/* Simplified Expr */
R = (1.0/4.0)*k*pi*std::pow(r, 4)*(x7*std::pow(x0*x2 - 2*x3*x4, 2) + x7*std::pow(-2*x0*x5 + 2*x3*x6, 2) + x7*std::pow(-x2*x6 + 2*x4*x5, 2))/L0;
}
template <typename T>
__host__ __device__ void dEdX(Eigen::Vector<T,9>& R, const T& k, const Eigen::Vector<T,9>& X, const T& L0, const T& r, const T& pi)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
Symbol Name Mapping:
k:
    -> {}
    -> Matrix([[k]])
X:
    -> {}
    -> Matrix([[X(0)], [X(1)], [X(2)], [X(3)], [X(4)], [X(5)], [X(6)], [X(7)], [X(8)]])
L0:
    -> {}
    -> Matrix([[L0]])
r:
    -> {}
    -> Matrix([[r]])
pi:
    -> {}
    -> Matrix([[pi]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = 4*X(4);
auto x1 = -4*X(7);
auto x2 = x0 + x1;
auto x3 = -X(0) + X(3);
auto x4 = -X(3) + X(6);
auto x5 = -X(1) + X(4);
auto x6 = -X(4) + X(7);
auto x7 = -X(2) + X(5);
auto x8 = -X(5) + X(8);
auto x9 = std::pow(x3, 2) + std::pow(x5, 2) + std::pow(x7, 2);
auto x10 = std::pow(x4, 2) + std::pow(x6, 2) + std::pow(x8, 2);
auto x11 = std::pow(x10*x9, 1.0/2.0);
auto x12 = x11 + x3*x4 + x5*x6 + x7*x8;
auto x13 = std::pow(x12, -2);
auto x14 = 2*x3;
auto x15 = x14*x6 - 2*x4*x5;
auto x16 = x13*x15;
auto x17 = 4*X(5);
auto x18 = -4*X(8);
auto x19 = x17 + x18;
auto x20 = -x14*x8 + 2*x4*x7;
auto x21 = x13*x20;
auto x22 = std::pow(x15, 2);
auto x23 = std::pow(x12, -3);
auto x24 = 2*X(0);
auto x25 = 2*X(3);
auto x26 = x24 - x25;
auto x27 = x11/x9;
auto x28 = 2*X(6);
auto x29 = x25 - x28;
auto x30 = x23*(-x26*x27 - x29);
auto x31 = std::pow(x20, 2);
auto x32 = 2*x5*x8 - 2*x6*x7;
auto x33 = std::pow(x32, 2);
auto x34 = (1.0/4.0)*k*pi*std::pow(r, 4)/L0;
auto x35 = 4*X(3);
auto x36 = -4*X(6);
auto x37 = x35 + x36;
auto x38 = x13*x32;
auto x39 = 2*X(1);
auto x40 = 2*X(4);
auto x41 = x39 - x40;
auto x42 = 2*X(7);
auto x43 = x40 - x42;
auto x44 = x23*(-x27*x41 - x43);
auto x45 = 2*X(2);
auto x46 = 2*X(5);
auto x47 = x45 - x46;
auto x48 = 2*X(8);
auto x49 = x46 - x48;
auto x50 = x23*(-x27*x47 - x49);
auto x51 = 4*X(1);
auto x52 = x1 + x51;
auto x53 = 4*X(2);
auto x54 = x18 + x53;
auto x55 = -x35;
auto x56 = (1.0/2.0)*x10;
auto x57 = (1.0/2.0)*x9;
auto x58 = std::pow(x10, -1);
auto x59 = 2*x27*x58;
auto x60 = x23*(-x24 - x28 - x55 - x59*(-x26*x56 + x29*x57));
auto x61 = 4*X(0);
auto x62 = x36 + x61;
auto x63 = -x0;
auto x64 = x23*(-x39 - x42 - x59*(-x41*x56 + x43*x57) - x63);
auto x65 = -x17;
auto x66 = x23*(-x45 - x48 - x59*(-x47*x56 + x49*x57) - x65);
auto x67 = x51 + x63;
auto x68 = x53 + x65;
auto x69 = x11*x58;
auto x70 = x23*(x24 - x25 + x29*x69);
auto x71 = x55 + x61;
auto x72 = x23*(x39 - x40 + x43*x69);
auto x73 = x23*(x45 - x46 + x49*x69);
/* Simplified Expr */
R(0) = x34*(x16*x2 - x19*x21 + x22*x30 + x30*x31 + x30*x33);
R(1) = x34*(-x16*x37 + x19*x38 + x22*x44 + x31*x44 + x33*x44);
R(2) = x34*(-x2*x38 + x21*x37 + x22*x50 + x31*x50 + x33*x50);
R(3) = x34*(-x16*x52 + x21*x54 + x22*x60 + x31*x60 + x33*x60);
R(4) = x34*(x16*x62 + x22*x64 + x31*x64 + x33*x64 - x38*x54);
R(5) = x34*(-x21*x62 + x22*x66 + x31*x66 + x33*x66 + x38*x52);
R(6) = x34*(x16*x67 - x21*x68 + x22*x70 + x31*x70 + x33*x70);
R(7) = x34*(-x16*x71 + x22*x72 + x31*x72 + x33*x72 + x38*x68);
R(8) = x34*(x21*x71 + x22*x73 + x31*x73 + x33*x73 - x38*x67);
}
template <typename T>
__host__ __device__ void ddEddX(Eigen::Matrix<T,9,9>& R, const T& k, const Eigen::Vector<T,9>& X, const T& L0, const T& r, const T& pi)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
Symbol Name Mapping:
k:
    -> {}
    -> Matrix([[k]])
X:
    -> {}
    -> Matrix([[X(0)], [X(1)], [X(2)], [X(3)], [X(4)], [X(5)], [X(6)], [X(7)], [X(8)]])
L0:
    -> {}
    -> Matrix([[L0]])
r:
    -> {}
    -> Matrix([[r]])
pi:
    -> {}
    -> Matrix([[pi]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = 2*X(4);
auto x1 = 2*X(7);
auto x2 = -x1;
auto x3 = x0 + x2;
auto x4 = -X(0) + X(3);
auto x5 = -X(3) + X(6);
auto x6 = -X(1) + X(4);
auto x7 = -X(4) + X(7);
auto x8 = -X(2) + X(5);
auto x9 = -X(5) + X(8);
auto x10 = std::pow(x4, 2) + std::pow(x6, 2) + std::pow(x8, 2);
auto x11 = std::pow(x5, 2) + std::pow(x7, 2) + std::pow(x9, 2);
auto x12 = std::pow(x10*x11, 1.0/2.0);
auto x13 = x12 + x4*x5 + x6*x7 + x8*x9;
auto x14 = std::pow(x13, -2);
auto x15 = 4*X(4);
auto x16 = -4*X(7);
auto x17 = x15 + x16;
auto x18 = x14*x17;
auto x19 = 2*X(5);
auto x20 = 2*X(8);
auto x21 = -x20;
auto x22 = x19 + x21;
auto x23 = -x22;
auto x24 = 4*X(5);
auto x25 = -4*X(8);
auto x26 = x24 + x25;
auto x27 = -x26;
auto x28 = x14*x27;
auto x29 = 2*X(0);
auto x30 = 2*X(3);
auto x31 = x29 - x30;
auto x32 = x12/x10;
auto x33 = x31*x32;
auto x34 = 2*X(6);
auto x35 = -x34;
auto x36 = x30 + x35;
auto x37 = -x33 - x36;
auto x38 = std::pow(x13, -3);
auto x39 = 2*x4;
auto x40 = x39*x7 - 2*x5*x6;
auto x41 = x38*x40;
auto x42 = x37*x41;
auto x43 = -x39*x9 + 2*x5*x8;
auto x44 = x38*x43;
auto x45 = x27*x44;
auto x46 = std::pow(x40, 2);
auto x47 = 3*X(3);
auto x48 = 3*X(6);
auto x49 = -3.0/2.0*x33 - x47 + x48;
auto x50 = std::pow(x13, -4);
auto x51 = x37*x50;
auto x52 = x49*x51;
auto x53 = std::pow(x43, 2);
auto x54 = 2*x6*x9 - 2*x7*x8;
auto x55 = std::pow(x54, 2);
auto x56 = 2*x32;
auto x57 = x12/std::pow(x10, 2);
auto x58 = std::pow(x31, 2)*x57;
auto x59 = -x31;
auto x60 = x31*x57;
auto x61 = x38*(-x56 - 1.0/2.0*x58 - x59*x60);
auto x62 = (1.0/4.0)*k*pi*std::pow(r, 4)/L0;
auto x63 = 2*X(1);
auto x64 = -x0 + x63;
auto x65 = -x64;
auto x66 = x60*x64;
auto x67 = (1.0/2.0)*x66;
auto x68 = x38*(-x60*x65 - x67);
auto x69 = -x36;
auto x70 = 3*X(4);
auto x71 = 3*X(7);
auto x72 = x32*x64;
auto x73 = -x70 + x71 - 3.0/2.0*x72;
auto x74 = x51*x73;
auto x75 = 4*X(3);
auto x76 = -4*X(6);
auto x77 = x75 + x76;
auto x78 = -x77;
auto x79 = -x3 - x72;
auto x80 = x17*x41;
auto x81 = x38*x54;
auto x82 = x37*x81;
auto x83 = x26*x82 + x42*x78 + x45*x79 + x79*x80;
auto x84 = 2*X(2);
auto x85 = -x19 + x84;
auto x86 = -x85;
auto x87 = (1.0/2.0)*x85;
auto x88 = x60*x87;
auto x89 = x38*(-x60*x86 - x88);
auto x90 = 3*X(5);
auto x91 = 3*X(8);
auto x92 = x32*x85;
auto x93 = -x90 + x91 - 3.0/2.0*x92;
auto x94 = x51*x93;
auto x95 = -x17;
auto x96 = -x22 - x92;
auto x97 = x37*x44;
auto x98 = x45*x96 + x77*x97 + x80*x96 + x82*x95;
auto x99 = std::pow(x11, -1);
auto x100 = (1.0/2.0)*x11;
auto x101 = (1.0/2.0)*x10;
auto x102 = x100*x59 + x101*x36;
auto x103 = x102*x99;
auto x104 = x103*x60;
auto x105 = 2 - x56;
auto x106 = x38*(-x104 - x105 - x58);
auto x107 = x21 + x84;
auto x108 = x2 + x63;
auto x109 = -x108;
auto x110 = 3*X(0);
auto x111 = 3*x32;
auto x112 = 6*X(3) - x103*x111 - x110 - x48;
auto x113 = x112*x51;
auto x114 = 4*X(1);
auto x115 = x114 + x16;
auto x116 = -x115;
auto x117 = -x75;
auto x118 = -x103*x56 - x117 - x29 - x34;
auto x119 = 4*X(2);
auto x120 = x119 + x25;
auto x121 = x116*x42 + x118*x45 + x118*x80 + x120*x97;
auto x122 = x100*x65 + x101*x3;
auto x123 = x122*x99;
auto x124 = x123*x60;
auto x125 = x38*(-x124 - x66);
auto x126 = x29 + x35;
auto x127 = 3*X(1);
auto x128 = 6*X(4) - x111*x123 - x127 - x71;
auto x129 = x128*x51;
auto x130 = 4*x14;
auto x131 = x130*x40;
auto x132 = -x120;
auto x133 = -x15;
auto x134 = -x1 - x123*x56 - x133 - x63;
auto x135 = 4*X(0);
auto x136 = x135 + x76;
auto x137 = x131 + x132*x82 + x134*x45 + x134*x80 + x136*x42;
auto x138 = x60*x85;
auto x139 = x100*x86 + x101*x22;
auto x140 = x139*x99;
auto x141 = x140*x60;
auto x142 = x38*(-x138 - x141);
auto x143 = -x126;
auto x144 = 3*X(2);
auto x145 = 6*X(5) - x111*x140 - x144 - x91;
auto x146 = x145*x51;
auto x147 = x130*x43;
auto x148 = -x147;
auto x149 = -x136;
auto x150 = -x24;
auto x151 = -x140*x56 - x150 - x20 - x84;
auto x152 = x115*x82 + x148 + x149*x97 + x151*x45 + x151*x80;
auto x153 = x12*x99;
auto x154 = x153*x69;
auto x155 = x110 - 3.0/2.0*x154 - x47;
auto x156 = x155*x51;
auto x157 = (1.0/2.0)*x99;
auto x158 = x157*x33;
auto x159 = x38*(-x158*x69 + 2);
auto x160 = x119 + x150;
auto x161 = -x160;
auto x162 = x114 + x133;
auto x163 = -x154 + x29 - x30;
auto x164 = x159*x46 + x159*x53 + x159*x55 + x161*x97 + x162*x42 + x163*x45 + x163*x80;
auto x165 = -x3;
auto x166 = x153*x165;
auto x167 = x127 - 3.0/2.0*x166 - x70;
auto x168 = x167*x51;
auto x169 = -x131;
auto x170 = x117 + x135;
auto x171 = -x170;
auto x172 = -x0 - x166 + x63;
auto x173 = x38*x53;
auto x174 = x158*x165;
auto x175 = x174*x38;
auto x176 = x160*x82 + x169 + x171*x42 + x172*x45 + x172*x80 - x173*x174 - x175*x46 - x175*x55;
auto x177 = x153*x23;
auto x178 = x144 - 3.0/2.0*x177 - x90;
auto x179 = x178*x51;
auto x180 = -x162;
auto x181 = -x177 - x19 + x84;
auto x182 = (1.0/2.0)*x23;
auto x183 = x182*x99;
auto x184 = x183*x33;
auto x185 = x184*x38;
auto x186 = x147 + x170*x97 - x173*x184 + x180*x82 + x181*x45 + x181*x80 - x185*x46 - x185*x55;
auto x187 = x57*x64;
auto x188 = x38*(-x187*x59 - x67);
auto x189 = x14*x78;
auto x190 = x50*x79;
auto x191 = x190*x49;
auto x192 = x14*x26;
auto x193 = x41*x78;
auto x194 = x79*x81;
auto x195 = x190*x73;
auto x196 = x57*std::pow(x64, 2);
auto x197 = x38*(-x187*x65 - 1.0/2.0*x196 - x56);
auto x198 = x187*x87;
auto x199 = x38*(-x187*x86 - x198);
auto x200 = x190*x93;
auto x201 = x44*x79;
auto x202 = x26*x81;
auto x203 = x193*x96 + x194*x95 + x201*x77 + x202*x96;
auto x204 = x103*x187;
auto x205 = x38*(-x204 - x66);
auto x206 = x112*x190;
auto x207 = x41*x79;
auto x208 = x116*x207 + x118*x193 + x118*x202 + x120*x201 + x169;
auto x209 = x123*x187;
auto x210 = x38*(-x105 - x196 - x209);
auto x211 = -x107;
auto x212 = x128*x190;
auto x213 = x132*x194 + x134*x193 + x134*x202 + x136*x207;
auto x214 = x187*x85;
auto x215 = x140*x187;
auto x216 = x38*(-x214 - x215);
auto x217 = x145*x190;
auto x218 = x130*x54;
auto x219 = x115*x194 + x149*x201 + x151*x193 + x151*x202 + x218;
auto x220 = x155*x190;
auto x221 = x157*x72;
auto x222 = x221*x69;
auto x223 = x222*x38;
auto x224 = x131 + x161*x201 + x162*x207 + x163*x193 + x163*x202 - x173*x222 - x223*x46 - x223*x55;
auto x225 = x167*x190;
auto x226 = x38*(-x165*x221 + 2);
auto x227 = x160*x194 + x171*x207 + x172*x193 + x172*x202 + x226*x46 + x226*x53 + x226*x55;
auto x228 = x178*x190;
auto x229 = -x218;
auto x230 = x183*x72;
auto x231 = x230*x38;
auto x232 = x170*x201 - x173*x230 + x180*x194 + x181*x193 + x181*x202 + x229 - x231*x46 - x231*x55;
auto x233 = x57*x85;
auto x234 = x38*(-x233*x59 - x88);
auto x235 = x14*x77;
auto x236 = x50*x96;
auto x237 = x236*x49;
auto x238 = x38*(-x198 - x233*x65);
auto x239 = x14*x95;
auto x240 = x236*x73;
auto x241 = x44*x77;
auto x242 = 2*x96;
auto x243 = x81*x95;
auto x244 = x236*x93;
auto x245 = x57*std::pow(x85, 2);
auto x246 = x38*(-x233*x86 - 1.0/2.0*x245 - x56);
auto x247 = x103*x233;
auto x248 = x38*(-x138 - x247);
auto x249 = x112*x236;
auto x250 = x41*x96;
auto x251 = x44*x96;
auto x252 = x116*x250 + x118*x241 + x118*x243 + x120*x251 + x147;
auto x253 = x123*x233;
auto x254 = x38*(-x214 - x253);
auto x255 = x128*x236;
auto x256 = x81*x96;
auto x257 = x132*x256 + x134*x241 + x134*x243 + x136*x250 + x229;
auto x258 = x140*x233;
auto x259 = x38*(-x105 - x245 - x258);
auto x260 = x145*x236;
auto x261 = x115*x256 + x149*x251 + x151*x241 + x151*x243;
auto x262 = x155*x236;
auto x263 = x157*x92;
auto x264 = x263*x69;
auto x265 = x264*x38;
auto x266 = x148 + x161*x251 + x162*x250 + x163*x241 + x163*x243 - x173*x264 - x265*x46 - x265*x55;
auto x267 = x167*x236;
auto x268 = x165*x263;
auto x269 = x268*x38;
auto x270 = x160*x256 + x171*x250 + x172*x241 + x172*x243 - x173*x268 + x218 - x269*x46 - x269*x55;
auto x271 = x178*x236;
auto x272 = x38*(-x183*x92 + 2);
auto x273 = x170*x251 + x180*x256 + x181*x241 + x181*x243 + x272*x46 + x272*x53 + x272*x55;
auto x274 = x56*x99;
auto x275 = 2*x57;
auto x276 = x103*x275;
auto x277 = x38*(-x104 - x274*(-x11 + (1.0/2.0)*x31*x36) - x276*x59 - 2);
auto x278 = x116*x14;
auto x279 = x120*x14;
auto x280 = x118*x50;
auto x281 = x280*x49;
auto x282 = x36*x99;
auto x283 = x38*(-x204 - x276*x65 - x282*x72);
auto x284 = x280*x73;
auto x285 = x38*(-x247 - x276*x86 - x282*x92);
auto x286 = x280*x93;
auto x287 = x116*x41;
auto x288 = 2*x118;
auto x289 = x120*x44;
auto x290 = x112*x280;
auto x291 = x10 + x11;
auto x292 = std::pow(x11, -2);
auto x293 = x275*x292;
auto x294 = x102*x292;
auto x295 = x294*x56;
auto x296 = x38*(-std::pow(x102, 2)*x293 - 2*x104 - x274*(x291 + x36*x59) - x295*x69 + 4);
auto x297 = (1.0/2.0)*x59;
auto x298 = (1.0/2.0)*x36;
auto x299 = x102*x293;
auto x300 = x122*x299 + x274*(x297*x3 + x298*x65);
auto x301 = x38*(-x165*x295 - 2*x204 - x300);
auto x302 = x128*x280;
auto x303 = x118*x81;
auto x304 = x118*x41;
auto x305 = x132*x303 + x134*x287 + x134*x289 + x136*x304;
auto x306 = x139*x299 + x274*(x22*x297 + x298*x86);
auto x307 = x38*(-x23*x295 - 2*x247 - x306);
auto x308 = x145*x280;
auto x309 = x118*x44;
auto x310 = x115*x303 + x149*x309 + x151*x287 + x151*x289;
auto x311 = x32*x69;
auto x312 = x294*x311 + 2;
auto x313 = x38*(-x274*(-x10 + (1.0/2.0)*x59*x69) - x295*x36 - x312);
auto x314 = x155*x280;
auto x315 = x161*x309 + x162*x304 + x163*x287 + x163*x289;
auto x316 = x165*x32;
auto x317 = x59*x99;
auto x318 = x294*x316;
auto x319 = x38*(-x295*x3 - x316*x317 - x318);
auto x320 = x167*x280;
auto x321 = x131 + x160*x303 + x171*x304 + x172*x287 + x172*x289;
auto x322 = x23*x32;
auto x323 = x294*x322;
auto x324 = x38*(-x22*x295 - x317*x322 - x323);
auto x325 = x178*x280;
auto x326 = x148 + x170*x309 + x180*x303 + x181*x287 + x181*x289;
auto x327 = x3*x99;
auto x328 = x123*x275;
auto x329 = x38*(-x124 - x327*x33 - x328*x59);
auto x330 = x136*x14;
auto x331 = x134*x50;
auto x332 = x331*x49;
auto x333 = x38*(-x209 - x274*(-x11 + (1.0/2.0)*x3*x64) - x328*x65 - 2);
auto x334 = x132*x14;
auto x335 = x331*x73;
auto x336 = x38*(-x253 - x327*x92 - x328*x86);
auto x337 = x331*x93;
auto x338 = x122*x292;
auto x339 = x338*x56;
auto x340 = x38*(-2*x124 - x300 - x339*x69);
auto x341 = x112*x331;
auto x342 = x136*x41;
auto x343 = 2*x134;
auto x344 = x132*x81;
auto x345 = x128*x331;
auto x346 = x38*(-std::pow(x122, 2)*x293 - x165*x339 - 2*x209 - x274*(x291 + x3*x65) + 4);
auto x347 = x122*x139*x293 + x274*((1.0/2.0)*x22*x65 + (1.0/2.0)*x3*x86);
auto x348 = x38*(-x23*x339 - 2*x253 - x347);
auto x349 = x145*x331;
auto x350 = x134*x44;
auto x351 = x134*x81;
auto x352 = x115*x351 + x149*x350 + x151*x342 + x151*x344;
auto x353 = x65*x99;
auto x354 = x311*x338;
auto x355 = x38*(-x311*x353 - x339*x36 - x354);
auto x356 = x155*x331;
auto x357 = x134*x41;
auto x358 = x161*x350 + x162*x357 + x163*x342 + x163*x344 + x169;
auto x359 = x316*x338 + 2;
auto x360 = x38*(-x274*(-x10 + (1.0/2.0)*x165*x65) - x3*x339 - x359);
auto x361 = x167*x331;
auto x362 = x160*x351 + x171*x357 + x172*x342 + x172*x344;
auto x363 = x322*x338;
auto x364 = x38*(-x22*x339 - x322*x353 - x363);
auto x365 = x178*x331;
auto x366 = x170*x350 + x180*x351 + x181*x342 + x181*x344 + x218;
auto x367 = x22*x99;
auto x368 = x140*x275;
auto x369 = x38*(-x141 - x33*x367 - x368*x59);
auto x370 = x14*x149;
auto x371 = x151*x50;
auto x372 = x371*x49;
auto x373 = x38*(-x215 - x367*x72 - x368*x65);
auto x374 = x115*x14;
auto x375 = x371*x73;
auto x376 = x38*(-x258 - x274*(-x11 + (1.0/2.0)*x22*x85) - x368*x86 - 2);
auto x377 = x371*x93;
auto x378 = x139*x292;
auto x379 = x378*x56;
auto x380 = x38*(-2*x141 - x306 - x379*x69);
auto x381 = x112*x371;
auto x382 = x38*(-x165*x379 - 2*x215 - x347);
auto x383 = x128*x371;
auto x384 = x149*x44;
auto x385 = 2*x151;
auto x386 = x115*x81;
auto x387 = x145*x371;
auto x388 = x38*(-std::pow(x139, 2)*x293 - x23*x379 - 2*x258 - x274*(x22*x86 + x291) + 4);
auto x389 = x86*x99;
auto x390 = x311*x378;
auto x391 = x38*(-x311*x389 - x36*x379 - x390);
auto x392 = x155*x371;
auto x393 = x151*x44;
auto x394 = x151*x41;
auto x395 = x147 + x161*x393 + x162*x394 + x163*x384 + x163*x386;
auto x396 = x316*x378;
auto x397 = x38*(-x3*x379 - x316*x389 - x396);
auto x398 = x167*x371;
auto x399 = x151*x81;
auto x400 = x160*x399 + x171*x394 + x172*x384 + x172*x386 + x229;
auto x401 = x322*x378 + 2;
auto x402 = x38*(-x22*x379 - x274*(-x10 + (1.0/2.0)*x23*x86) - x401);
auto x403 = x178*x371;
auto x404 = x170*x393 + x180*x399 + x181*x384 + x181*x386;
auto x405 = x14*x161;
auto x406 = x14*x162;
auto x407 = x163*x50;
auto x408 = x407*x49;
auto x409 = x407*x73;
auto x410 = x407*x93;
auto x411 = 2*x153;
auto x412 = -x411;
auto x413 = x12*x292;
auto x414 = x413*std::pow(x69, 2);
auto x415 = x38*(-x312 - x412 - x414);
auto x416 = x112*x407;
auto x417 = x413*x69;
auto x418 = x165*x417;
auto x419 = x38*(-x354 - x418);
auto x420 = x128*x407;
auto x421 = x23*x417;
auto x422 = x38*(-x390 - x421);
auto x423 = x145*x407;
auto x424 = x162*x41;
auto x425 = 2*x163;
auto x426 = x161*x44;
auto x427 = x155*x407;
auto x428 = x38*(-x36*x417 - x411 - 1.0/2.0*x414);
auto x429 = (1.0/2.0)*x418;
auto x430 = x38*(-x3*x417 - x429);
auto x431 = x167*x407;
auto x432 = x171*x41;
auto x433 = x163*x81;
auto x434 = x160*x433 + x163*x432 + x172*x424 + x172*x426;
auto x435 = x182*x417;
auto x436 = x38*(-x22*x417 - x435);
auto x437 = x178*x407;
auto x438 = x170*x44;
auto x439 = x163*x438 + x180*x433 + x181*x424 + x181*x426;
auto x440 = x14*x171;
auto x441 = x172*x50;
auto x442 = x441*x49;
auto x443 = x14*x160;
auto x444 = x441*x73;
auto x445 = x441*x93;
auto x446 = x38*(-x318 - x418);
auto x447 = x112*x441;
auto x448 = std::pow(x165, 2)*x413;
auto x449 = x38*(-x359 - x412 - x448);
auto x450 = x128*x441;
auto x451 = x165*x413;
auto x452 = x23*x451;
auto x453 = x38*(-x396 - x452);
auto x454 = x145*x441;
auto x455 = x38*(-x36*x451 - x429);
auto x456 = x155*x441;
auto x457 = x172*x81;
auto x458 = x167*x441;
auto x459 = x38*(-x3*x451 - x411 - 1.0/2.0*x448);
auto x460 = x182*x451;
auto x461 = x38*(-x22*x451 - x460);
auto x462 = x178*x441;
auto x463 = x181*x81;
auto x464 = x160*x463 + x172*x438 + x180*x457 + x181*x432;
auto x465 = x14*x170;
auto x466 = x181*x50;
auto x467 = x466*x49;
auto x468 = x14*x180;
auto x469 = x466*x73;
auto x470 = x466*x93;
auto x471 = x38*(-x323 - x421);
auto x472 = x112*x466;
auto x473 = x38*(-x363 - x452);
auto x474 = x128*x466;
auto x475 = std::pow(x23, 2)*x413;
auto x476 = x38*(-x401 - x412 - x475);
auto x477 = x145*x466;
auto x478 = x23*x413;
auto x479 = x38*(-x36*x478 - x435);
auto x480 = x155*x466;
auto x481 = x38*(-x3*x478 - x460);
auto x482 = x167*x466;
auto x483 = x178*x466;
auto x484 = x38*(-x22*x478 - x411 - 1.0/2.0*x475);
/* Simplified Expr */
R(0,0) = x62*(2*x17*x42 + x18*x3 + x23*x28 + 2*x37*x45 + x46*x52 + x46*x61 + x52*x53 + x52*x55 + x53*x61 + x55*x61);
R(0,1) = x62*(x18*x69 + x46*x68 + x46*x74 + x53*x68 + x53*x74 + x55*x68 + x55*x74 + x83);
R(0,2) = x62*(x28*x36 + x46*x89 + x46*x94 + x53*x89 + x53*x94 + x55*x89 + x55*x94 + x98);
R(0,3) = x62*(x106*x46 + x106*x53 + x106*x55 + x107*x28 + x109*x18 + x113*x46 + x113*x53 + x113*x55 + x121);
R(0,4) = x62*(x125*x46 + x125*x53 + x125*x55 + x126*x18 + x129*x46 + x129*x53 + x129*x55 + x137);
R(0,5) = x62*(x142*x46 + x142*x53 + x142*x55 + x143*x28 + x146*x46 + x146*x53 + x146*x55 + x152);
R(0,6) = x62*(x156*x46 + x156*x53 + x156*x55 + x164 + x18*x64 + x28*x86);
R(0,7) = x62*(x168*x46 + x168*x53 + x168*x55 + x176 + x18*x59);
R(0,8) = x62*(x179*x46 + x179*x53 + x179*x55 + x186 + x28*x31);
R(1,0) = x62*(x188*x46 + x188*x53 + x188*x55 + x189*x3 + x191*x46 + x191*x53 + x191*x55 + x83);
R(1,1) = x62*(x189*x69 + x192*x22 + 2*x193*x79 + 2*x194*x26 + x195*x46 + x195*x53 + x195*x55 + x197*x46 + x197*x53 + x197*x55);
R(1,2) = x62*(x165*x192 + x199*x46 + x199*x53 + x199*x55 + x200*x46 + x200*x53 + x200*x55 + x203);
R(1,3) = x62*(x109*x189 + x205*x46 + x205*x53 + x205*x55 + x206*x46 + x206*x53 + x206*x55 + x208);
R(1,4) = x62*(x126*x189 + x192*x211 + x210*x46 + x210*x53 + x210*x55 + x212*x46 + x212*x53 + x212*x55 + x213);
R(1,5) = x62*(x108*x192 + x216*x46 + x216*x53 + x216*x55 + x217*x46 + x217*x53 + x217*x55 + x219);
R(1,6) = x62*(x189*x64 + x220*x46 + x220*x53 + x220*x55 + x224);
R(1,7) = x62*(x189*x59 + x192*x85 + x225*x46 + x225*x53 + x225*x55 + x227);
R(1,8) = x62*(x192*x65 + x228*x46 + x228*x53 + x228*x55 + x232);
R(2,0) = x62*(x23*x235 + x234*x46 + x234*x53 + x234*x55 + x237*x46 + x237*x53 + x237*x55 + x98);
R(2,1) = x62*(x203 + x22*x239 + x238*x46 + x238*x53 + x238*x55 + x240*x46 + x240*x53 + x240*x55);
R(2,2) = x62*(x165*x239 + x235*x36 + x241*x242 + x242*x243 + x244*x46 + x244*x53 + x244*x55 + x246*x46 + x246*x53 + x246*x55);
R(2,3) = x62*(x107*x235 + x248*x46 + x248*x53 + x248*x55 + x249*x46 + x249*x53 + x249*x55 + x252);
R(2,4) = x62*(x211*x239 + x254*x46 + x254*x53 + x254*x55 + x255*x46 + x255*x53 + x255*x55 + x257);
R(2,5) = x62*(x108*x239 + x143*x235 + x259*x46 + x259*x53 + x259*x55 + x260*x46 + x260*x53 + x260*x55 + x261);
R(2,6) = x62*(x235*x86 + x262*x46 + x262*x53 + x262*x55 + x266);
R(2,7) = x62*(x239*x85 + x267*x46 + x267*x53 + x267*x55 + x270);
R(2,8) = x62*(x235*x31 + x239*x65 + x271*x46 + x271*x53 + x271*x55 + x273);
R(3,0) = x62*(x121 + x23*x279 + x277*x46 + x277*x53 + x277*x55 + x278*x3 + x281*x46 + x281*x53 + x281*x55);
R(3,1) = x62*(x208 + x278*x69 + x283*x46 + x283*x53 + x283*x55 + x284*x46 + x284*x53 + x284*x55);
R(3,2) = x62*(x252 + x279*x36 + x285*x46 + x285*x53 + x285*x55 + x286*x46 + x286*x53 + x286*x55);
R(3,3) = x62*(x107*x279 + x109*x278 + x287*x288 + x288*x289 + x290*x46 + x290*x53 + x290*x55 + x296*x46 + x296*x53 + x296*x55);
R(3,4) = x62*(x126*x278 + x301*x46 + x301*x53 + x301*x55 + x302*x46 + x302*x53 + x302*x55 + x305);
R(3,5) = x62*(x143*x279 + x307*x46 + x307*x53 + x307*x55 + x308*x46 + x308*x53 + x308*x55 + x310);
R(3,6) = x62*(x278*x64 + x279*x86 + x313*x46 + x313*x53 + x313*x55 + x314*x46 + x314*x53 + x314*x55 + x315);
R(3,7) = x62*(x278*x59 + x319*x46 + x319*x53 + x319*x55 + x320*x46 + x320*x53 + x320*x55 + x321);
R(3,8) = x62*(x279*x31 + x324*x46 + x324*x53 + x324*x55 + x325*x46 + x325*x53 + x325*x55 + x326);
R(4,0) = x62*(x137 + x3*x330 + x329*x46 + x329*x53 + x329*x55 + x332*x46 + x332*x53 + x332*x55);
R(4,1) = x62*(x213 + x22*x334 + x330*x69 + x333*x46 + x333*x53 + x333*x55 + x335*x46 + x335*x53 + x335*x55);
R(4,2) = x62*(x165*x334 + x257 + x336*x46 + x336*x53 + x336*x55 + x337*x46 + x337*x53 + x337*x55);
R(4,3) = x62*(x109*x330 + x305 + x340*x46 + x340*x53 + x340*x55 + x341*x46 + x341*x53 + x341*x55);
R(4,4) = x62*(x126*x330 + x211*x334 + x342*x343 + x343*x344 + x345*x46 + x345*x53 + x345*x55 + x346*x46 + x346*x53 + x346*x55);
R(4,5) = x62*(x108*x334 + x348*x46 + x348*x53 + x348*x55 + x349*x46 + x349*x53 + x349*x55 + x352);
R(4,6) = x62*(x330*x64 + x355*x46 + x355*x53 + x355*x55 + x356*x46 + x356*x53 + x356*x55 + x358);
R(4,7) = x62*(x330*x59 + x334*x85 + x360*x46 + x360*x53 + x360*x55 + x361*x46 + x361*x53 + x361*x55 + x362);
R(4,8) = x62*(x334*x65 + x364*x46 + x364*x53 + x364*x55 + x365*x46 + x365*x53 + x365*x55 + x366);
R(5,0) = x62*(x152 + x23*x370 + x369*x46 + x369*x53 + x369*x55 + x372*x46 + x372*x53 + x372*x55);
R(5,1) = x62*(x219 + x22*x374 + x373*x46 + x373*x53 + x373*x55 + x375*x46 + x375*x53 + x375*x55);
R(5,2) = x62*(x165*x374 + x261 + x36*x370 + x376*x46 + x376*x53 + x376*x55 + x377*x46 + x377*x53 + x377*x55);
R(5,3) = x62*(x107*x370 + x310 + x380*x46 + x380*x53 + x380*x55 + x381*x46 + x381*x53 + x381*x55);
R(5,4) = x62*(x211*x374 + x352 + x382*x46 + x382*x53 + x382*x55 + x383*x46 + x383*x53 + x383*x55);
R(5,5) = x62*(x108*x374 + x143*x370 + x384*x385 + x385*x386 + x387*x46 + x387*x53 + x387*x55 + x388*x46 + x388*x53 + x388*x55);
R(5,6) = x62*(x370*x86 + x391*x46 + x391*x53 + x391*x55 + x392*x46 + x392*x53 + x392*x55 + x395);
R(5,7) = x62*(x374*x85 + x397*x46 + x397*x53 + x397*x55 + x398*x46 + x398*x53 + x398*x55 + x400);
R(5,8) = x62*(x31*x370 + x374*x65 + x402*x46 + x402*x53 + x402*x55 + x403*x46 + x403*x53 + x403*x55 + x404);
R(6,0) = x62*(x164 + x23*x405 + x3*x406 + x408*x46 + x408*x53 + x408*x55);
R(6,1) = x62*(x224 + x406*x69 + x409*x46 + x409*x53 + x409*x55);
R(6,2) = x62*(x266 + x36*x405 + x410*x46 + x410*x53 + x410*x55);
R(6,3) = x62*(x107*x405 + x109*x406 + x315 + x415*x46 + x415*x53 + x415*x55 + x416*x46 + x416*x53 + x416*x55);
R(6,4) = x62*(x126*x406 + x358 + x419*x46 + x419*x53 + x419*x55 + x420*x46 + x420*x53 + x420*x55);
R(6,5) = x62*(x143*x405 + x395 + x422*x46 + x422*x53 + x422*x55 + x423*x46 + x423*x53 + x423*x55);
R(6,6) = x62*(x405*x86 + x406*x64 + x424*x425 + x425*x426 + x427*x46 + x427*x53 + x427*x55 + x428*x46 + x428*x53 + x428*x55);
R(6,7) = x62*(x406*x59 + x430*x46 + x430*x53 + x430*x55 + x431*x46 + x431*x53 + x431*x55 + x434);
R(6,8) = x62*(x31*x405 + x436*x46 + x436*x53 + x436*x55 + x437*x46 + x437*x53 + x437*x55 + x439);
R(7,0) = x62*(x176 + x3*x440 + x442*x46 + x442*x53 + x442*x55);
R(7,1) = x62*(x22*x443 + x227 + x440*x69 + x444*x46 + x444*x53 + x444*x55);
R(7,2) = x62*(x165*x443 + x270 + x445*x46 + x445*x53 + x445*x55);
R(7,3) = x62*(x109*x440 + x321 + x446*x46 + x446*x53 + x446*x55 + x447*x46 + x447*x53 + x447*x55);
R(7,4) = x62*(x126*x440 + x211*x443 + x362 + x449*x46 + x449*x53 + x449*x55 + x450*x46 + x450*x53 + x450*x55);
R(7,5) = x62*(x108*x443 + x400 + x453*x46 + x453*x53 + x453*x55 + x454*x46 + x454*x53 + x454*x55);
R(7,6) = x62*(x434 + x440*x64 + x455*x46 + x455*x53 + x455*x55 + x456*x46 + x456*x53 + x456*x55);
R(7,7) = x62*(2*x160*x457 + 2*x172*x432 + x440*x59 + x443*x85 + x458*x46 + x458*x53 + x458*x55 + x459*x46 + x459*x53 + x459*x55);
R(7,8) = x62*(x443*x65 + x46*x461 + x46*x462 + x461*x53 + x461*x55 + x462*x53 + x462*x55 + x464);
R(8,0) = x62*(x186 + x23*x465 + x46*x467 + x467*x53 + x467*x55);
R(8,1) = x62*(x22*x468 + x232 + x46*x469 + x469*x53 + x469*x55);
R(8,2) = x62*(x165*x468 + x273 + x36*x465 + x46*x470 + x470*x53 + x470*x55);
R(8,3) = x62*(x107*x465 + x326 + x46*x471 + x46*x472 + x471*x53 + x471*x55 + x472*x53 + x472*x55);
R(8,4) = x62*(x211*x468 + x366 + x46*x473 + x46*x474 + x473*x53 + x473*x55 + x474*x53 + x474*x55);
R(8,5) = x62*(x108*x468 + x143*x465 + x404 + x46*x476 + x46*x477 + x476*x53 + x476*x55 + x477*x53 + x477*x55);
R(8,6) = x62*(x439 + x46*x479 + x46*x480 + x465*x86 + x479*x53 + x479*x55 + x480*x53 + x480*x55);
R(8,7) = x62*(x46*x481 + x46*x482 + x464 + x468*x85 + x481*x53 + x481*x55 + x482*x53 + x482*x55);
R(8,8) = x62*(2*x180*x463 + 2*x181*x438 + x31*x465 + x46*x483 + x46*x484 + x468*x65 + x483*x53 + x483*x55 + x484*x53 + x484*x55);
}
