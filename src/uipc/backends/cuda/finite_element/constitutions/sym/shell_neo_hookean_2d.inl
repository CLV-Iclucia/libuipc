
template <typename T>
__host__ __device__ void A(Eigen::Matrix<T,2,2>& R, const Eigen::Vector<T,9>& X)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
Symbol Name Mapping:
X:
    -> {}
    -> Matrix([[X(0)], [X(1)], [X(2)], [X(3)], [X(4)], [X(5)], [X(6)], [X(7)], [X(8)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = -X(0) + X(3);
auto x1 = -X(1) + X(4);
auto x2 = -X(2) + X(5);
auto x3 = -X(0) + X(6);
auto x4 = -X(1) + X(7);
auto x5 = -X(2) + X(8);
auto x6 = x0*x3 + x1*x4 + x2*x5;
/* Simplified Expr */
R(0,0) = std::pow(x0, 2) + std::pow(x1, 2) + std::pow(x2, 2);
R(0,1) = x6;
R(1,0) = x6;
R(1,1) = std::pow(x3, 2) + std::pow(x4, 2) + std::pow(x5, 2);
}
template <typename T>
__host__ __device__ void E(T& R, const T& mu, const T& lambda, const Eigen::Vector<T,9>& X, const Eigen::Matrix<T,2,2>& IB)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
Symbol Name Mapping:
mu:
    -> {}
    -> Matrix([[mu]])
lambda:
    -> {}
    -> Matrix([[lambda]])
X:
    -> {}
    -> Matrix([[X(0)], [X(1)], [X(2)], [X(3)], [X(4)], [X(5)], [X(6)], [X(7)], [X(8)]])
IB:
    -> {}
    -> Matrix([[IB(0,0), IB(0,1)], [IB(1,0), IB(1,1)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = 2*X(0);
auto x1 = X(3)*x0;
auto x2 = X(1)*x1;
auto x3 = X(6)*x0;
auto x4 = X(1)*x3;
auto x5 = X(2)*X(5);
auto x6 = X(2)*X(8);
auto x7 = X(4)*X(7);
auto x8 = X(5)*X(8);
auto x9 = 2*X(1);
auto x10 = X(4)*x9;
auto x11 = X(7)*x9;
auto x12 = X(3)*X(6);
auto x13 = 2*X(2);
auto x14 = X(5)*x13;
auto x15 = X(8)*x13;
auto x16 = 2*x12;
auto x17 = std::pow(X(0), 2);
auto x18 = std::pow(X(4), 2);
auto x19 = std::pow(X(5), 2);
auto x20 = std::pow(X(7), 2);
auto x21 = std::pow(X(8), 2);
auto x22 = std::pow(X(1), 2);
auto x23 = std::pow(X(3), 2);
auto x24 = std::pow(X(6), 2);
auto x25 = std::pow(X(2), 2);
auto x26 = 2*x17;
auto x27 = 2*x22;
auto x28 = 2*x25;
auto x29 = log((IB(0,0)*IB(1,1) - IB(0,1)*IB(1,0))*(-X(4)*x2 + X(4)*x4 + X(7)*x2 - X(7)*x4 - x1*x20 - x1*x21 - x1*x5 + x1*x6 + x1*x7 + x1*x8 + x10*x12 - x10*x21 - x10*x24 - x10*x5 + x10*x6 + x10*x8 + x11*x12 - x11*x19 - x11*x23 + x11*x5 - x11*x6 + x11*x8 + x12*x14 + x12*x15 - x12*x27 - x12*x28 - x14*x20 - x14*x24 + x14*x7 - x15*x18 - x15*x23 + x15*x7 - x16*x7 - x16*x8 + x17*x18 + x17*x19 + x17*x20 + x17*x21 + x18*x21 + x18*x24 + x18*x25 - x18*x3 + x19*x20 + x19*x22 + x19*x24 - x19*x3 + x20*x23 + x20*x25 + x21*x22 + x21*x23 + x22*x23 + x22*x24 + x23*x25 + x24*x25 - x26*x7 - x26*x8 - x27*x8 - x28*x7 + x3*x5 - x3*x6 + x3*x7 + x3*x8 - 2*x7*x8));
auto x30 = -X(0) + X(3);
auto x31 = -X(1) + X(4);
auto x32 = -X(2) + X(5);
auto x33 = -X(0) + X(6);
auto x34 = -X(1) + X(7);
auto x35 = -X(2) + X(8);
auto x36 = x30*x33 + x31*x34 + x32*x35;
/* Simplified Expr */
R = (1.0/8.0)*lambda*std::pow(x29, 2) + (1.0/2.0)*mu*(IB(0,0)*(std::pow(x30, 2) + std::pow(x31, 2) + std::pow(x32, 2)) + IB(0,1)*x36 + IB(1,0)*x36 + IB(1,1)*(std::pow(x33, 2) + std::pow(x34, 2) + std::pow(x35, 2)) - x29 - 2);
}
template <typename T>
__host__ __device__ void dEdX(Eigen::Vector<T,9>& R, const T& mu, const T& lambda, const Eigen::Vector<T,9>& X, const Eigen::Matrix<T,2,2>& IB)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
Symbol Name Mapping:
mu:
    -> {}
    -> Matrix([[mu]])
lambda:
    -> {}
    -> Matrix([[lambda]])
X:
    -> {}
    -> Matrix([[X(0)], [X(1)], [X(2)], [X(3)], [X(4)], [X(5)], [X(6)], [X(7)], [X(8)]])
IB:
    -> {}
    -> Matrix([[IB(0,0), IB(0,1)], [IB(1,0), IB(1,1)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = 2*X(0);
auto x1 = 2*X(3);
auto x2 = x0 - x1;
auto x3 = 2*X(6);
auto x4 = x0 - x3;
auto x5 = -X(3) - X(6) + x0;
auto x6 = std::pow(X(7), 2);
auto x7 = x1*x6;
auto x8 = std::pow(X(8), 2);
auto x9 = x1*x8;
auto x10 = std::pow(X(4), 2);
auto x11 = x10*x3;
auto x12 = std::pow(X(5), 2);
auto x13 = x12*x3;
auto x14 = x0*x10;
auto x15 = x0*x12;
auto x16 = x0*x6;
auto x17 = x0*x8;
auto x18 = 4*X(0);
auto x19 = X(4)*X(7);
auto x20 = X(5)*X(8);
auto x21 = X(1)*x1;
auto x22 = X(4)*x21;
auto x23 = X(1)*x3;
auto x24 = X(7)*x23;
auto x25 = X(2)*x1;
auto x26 = X(5)*x25;
auto x27 = X(2)*x3;
auto x28 = X(8)*x27;
auto x29 = x1*x19;
auto x30 = x1*x20;
auto x31 = x19*x3;
auto x32 = x20*x3;
auto x33 = X(4)*x23 + X(5)*x27;
auto x34 = X(7)*x21;
auto x35 = X(8)*x25;
auto x36 = x34 + x35;
auto x37 = X(6)*x0;
auto x38 = X(4)*x37;
auto x39 = X(7)*x37;
auto x40 = X(5)*x37;
auto x41 = X(8)*x37;
auto x42 = 2*X(4);
auto x43 = X(2)*x42;
auto x44 = X(5)*x43;
auto x45 = X(8)*x43;
auto x46 = 2*X(1);
auto x47 = X(7)*x46;
auto x48 = X(5)*x47;
auto x49 = X(8)*x47;
auto x50 = x20*x42;
auto x51 = std::pow(X(0), 2);
auto x52 = std::pow(X(1), 2);
auto x53 = std::pow(X(3), 2);
auto x54 = std::pow(X(6), 2);
auto x55 = std::pow(X(2), 2);
auto x56 = x42*x51;
auto x57 = 2*X(5);
auto x58 = x51*x57;
auto x59 = x46*x53;
auto x60 = x42*x54;
auto x61 = x42*x8;
auto x62 = x12*x46;
auto x63 = x1*x52;
auto x64 = x52*x57;
auto x65 = 2*X(2);
auto x66 = x53*x65;
auto x67 = x10*x65;
auto x68 = x54*x57;
auto x69 = x57*x6;
auto x70 = x1*x55;
auto x71 = x42*x55;
auto x72 = -X(0)*x22 - X(0)*x26 + X(0)*x29 + X(0)*x30 + X(0)*x34 + X(0)*x35 - X(0)*x7 - X(0)*x9 + X(1)*x38 - X(1)*x39 - X(1)*x44 + X(1)*x45 + X(1)*x50 - X(1)*x60 - X(1)*x61 + X(2)*x40 - X(2)*x41 + X(2)*x48 - X(2)*x49 - X(2)*x68 - X(2)*x69 - X(6)*x14 - X(6)*x15 + X(6)*x22 + X(6)*x26 - X(6)*x29 - X(6)*x30 + X(6)*x34 + X(6)*x35 - X(6)*x63 - X(6)*x70 + X(7)*x44 + X(7)*x45 - X(7)*x50 - X(7)*x56 - X(7)*x59 - X(7)*x62 - X(7)*x71 - X(8)*x58 - X(8)*x64 - X(8)*x66 - X(8)*x67 + x10*x51 + x10*x54 + x10*x55 + x10*x8 + x12*x51 + x12*x52 + x12*x54 + x12*x6 + x19*x37 + x20*x37 + x20*x47 + x51*x6 + x51*x8 + x52*x53 + x52*x54 + x52*x8 + x53*x55 + x53*x6 + x53*x8 + x54*x55 + x55*x6;
auto x73 = std::pow(x72, -1);
auto x74 = x73*(-x11 - x13 + x14 + x15 + x16 + x17 - x18*x19 - x18*x20 - x22 - x24 - x26 - x28 + x29 + x30 + x31 + x32 + x33 + x36 - x7 - x9);
auto x75 = (1.0/2.0)*mu;
auto x76 = (1.0/4.0)*lambda*log(x72*(IB(0,0)*IB(1,1) - IB(0,1)*IB(1,0)));
auto x77 = -x42 + x46;
auto x78 = 2*X(7);
auto x79 = x46 - x78;
auto x80 = -X(4) - X(7) + x46;
auto x81 = x53*x78;
auto x82 = x12*x78;
auto x83 = x46*x54;
auto x84 = x46*x8;
auto x85 = 4*X(1);
auto x86 = X(3)*X(6);
auto x87 = X(0)*x1;
auto x88 = X(4)*x87;
auto x89 = X(2)*x78;
auto x90 = X(8)*x89;
auto x91 = X(6)*x1;
auto x92 = X(4)*x91;
auto x93 = X(7)*x91;
auto x94 = x20*x78;
auto x95 = X(5)*x89 + X(7)*x87;
auto x96 = x38 + x45;
auto x97 = x73*(-x20*x85 - x39 - x44 + x50 + x59 - x60 - x61 + x62 - x81 - x82 + x83 + x84 - x85*x86 - x88 - x90 + x92 + x93 + x94 + x95 + x96);
auto x98 = -x57 + x65;
auto x99 = 2*X(8);
auto x100 = x65 - x99;
auto x101 = -X(5) - X(8) + x65;
auto x102 = x53*x99;
auto x103 = x10*x99;
auto x104 = x54*x65;
auto x105 = x6*x65;
auto x106 = 4*X(2);
auto x107 = X(5)*x87;
auto x108 = X(1)*x42;
auto x109 = X(5)*x108;
auto x110 = X(5)*x91;
auto x111 = X(8)*x91;
auto x112 = X(7)*x42;
auto x113 = X(5)*x112;
auto x114 = X(8)*x112;
auto x115 = X(8)*x108 + X(8)*x87;
auto x116 = x40 + x48;
auto x117 = x73*(-x102 - x103 + x104 + x105 - x106*x19 - x106*x86 - x107 - x109 + x110 + x111 + x113 + x114 + x115 + x116 - x41 - x49 + x66 + x67 - x68 - x69);
auto x118 = -X(0) + X(6);
auto x119 = x3*x52;
auto x120 = x3*x55;
auto x121 = X(7)*x85;
auto x122 = X(8)*x106;
auto x123 = X(1)*x0;
auto x124 = X(4)*x123;
auto x125 = X(2)*x0;
auto x126 = X(5)*x125;
auto x127 = X(7)*x123;
auto x128 = X(8)*x125;
auto x129 = x0*x19 + x0*x20;
auto x130 = x73*(-X(3)*x121 - X(3)*x122 - x119 - x120 - x124 - x126 + x127 + x128 + x129 - x16 - x17 + x24 + x28 - x31 - x32 + x33 + x63 + x7 + x70 + x9);
auto x131 = -X(1) + X(7);
auto x132 = x51*x78;
auto x133 = x55*x78;
auto x134 = X(6)*x18;
auto x135 = X(0)*x21;
auto x136 = X(2)*x46;
auto x137 = X(5)*x136;
auto x138 = X(1)*x37;
auto x139 = X(8)*x136;
auto x140 = X(6)*x21 + x20*x46;
auto x141 = x73*(-X(4)*x122 - X(4)*x134 - x132 - x133 - x135 - x137 + x138 + x139 + x140 + x39 + x56 + x60 + x61 + x71 - x83 - x84 + x90 - x93 - x94 + x95);
auto x142 = -X(2) + X(8);
auto x143 = x51*x99;
auto x144 = x52*x99;
auto x145 = X(0)*x25;
auto x146 = X(1)*x43;
auto x147 = X(2)*x37;
auto x148 = X(2)*x47;
auto x149 = X(6)*x25 + X(7)*x43;
auto x150 = x73*(-X(5)*x121 - X(5)*x134 - x104 - x105 - x111 - x114 + x115 - x143 - x144 - x145 - x146 + x147 + x148 + x149 + x41 + x49 + x58 + x64 + x68 + x69);
auto x151 = -X(0) + X(3);
auto x152 = X(4)*x85;
auto x153 = X(5)*x106;
auto x154 = x73*(-X(6)*x152 - X(6)*x153 + x11 + x119 + x120 + x124 + x126 - x127 - x128 + x129 + x13 - x14 - x15 + x22 + x26 - x29 - x30 + x36 - x63 - x70);
auto x155 = -X(1) + X(4);
auto x156 = X(3)*x18;
auto x157 = x73*(-X(7)*x153 - X(7)*x156 + x132 + x133 + x135 + x137 - x138 - x139 + x140 + x44 - x50 - x56 - x59 - x62 - x71 + x81 + x82 + x88 - x92 + x96);
auto x158 = -X(2) + X(5);
auto x159 = x73*(-X(8)*x152 - X(8)*x156 + x102 + x103 + x107 + x109 - x110 - x113 + x116 + x143 + x144 + x145 + x146 - x147 - x148 + x149 - x58 - x64 - x66 - x67);
/* Simplified Expr */
R(0) = x74*x76 + x75*(IB(0,0)*x2 + IB(0,1)*x5 + IB(1,0)*x5 + IB(1,1)*x4 - x74);
R(1) = x75*(IB(0,0)*x77 + IB(0,1)*x80 + IB(1,0)*x80 + IB(1,1)*x79 - x97) + x76*x97;
R(2) = x117*x76 + x75*(IB(0,0)*x98 + IB(0,1)*x101 + IB(1,0)*x101 + IB(1,1)*x100 - x117);
R(3) = x130*x76 + x75*(-IB(0,0)*x2 + IB(0,1)*x118 + IB(1,0)*x118 - x130);
R(4) = x141*x76 + x75*(-IB(0,0)*x77 + IB(0,1)*x131 + IB(1,0)*x131 - x141);
R(5) = x150*x76 + x75*(-IB(0,0)*x98 + IB(0,1)*x142 + IB(1,0)*x142 - x150);
R(6) = x154*x76 + x75*(IB(0,1)*x151 + IB(1,0)*x151 - IB(1,1)*x4 - x154);
R(7) = x157*x76 + x75*(IB(0,1)*x155 + IB(1,0)*x155 - IB(1,1)*x79 - x157);
R(8) = x159*x76 + x75*(IB(0,1)*x158 + IB(1,0)*x158 - IB(1,1)*x100 - x159);
}
template <typename T>
__host__ __device__ void ddEddX(Eigen::Matrix<T,9,9>& R, const T& mu, const T& lambda, const Eigen::Vector<T,9>& X, const Eigen::Matrix<T,2,2>& IB)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
Symbol Name Mapping:
mu:
    -> {}
    -> Matrix([[mu]])
lambda:
    -> {}
    -> Matrix([[lambda]])
X:
    -> {}
    -> Matrix([[X(0)], [X(1)], [X(2)], [X(3)], [X(4)], [X(5)], [X(6)], [X(7)], [X(8)]])
IB:
    -> {}
    -> Matrix([[IB(0,0), IB(0,1)], [IB(1,0), IB(1,1)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = std::pow(X(7), 2);
auto x1 = 2*x0;
auto x2 = X(3)*x1;
auto x3 = std::pow(X(8), 2);
auto x4 = 2*x3;
auto x5 = X(3)*x4;
auto x6 = std::pow(X(4), 2);
auto x7 = 2*x6;
auto x8 = X(6)*x7;
auto x9 = std::pow(X(5), 2);
auto x10 = 2*x9;
auto x11 = X(6)*x10;
auto x12 = X(0)*x7;
auto x13 = X(0)*x10;
auto x14 = X(0)*x1;
auto x15 = X(0)*x4;
auto x16 = 2*X(3);
auto x17 = X(4)*x16;
auto x18 = X(1)*x17;
auto x19 = 2*X(6);
auto x20 = X(7)*x19;
auto x21 = X(1)*x20;
auto x22 = X(5)*x16;
auto x23 = X(2)*x22;
auto x24 = X(8)*x19;
auto x25 = X(2)*x24;
auto x26 = X(4)*X(7);
auto x27 = x16*x26;
auto x28 = X(5)*X(8);
auto x29 = x16*x28;
auto x30 = x19*x26;
auto x31 = x19*x28;
auto x32 = X(4)*x19;
auto x33 = X(1)*x32;
auto x34 = X(5)*x19;
auto x35 = X(2)*x34;
auto x36 = x33 + x35;
auto x37 = X(7)*x16;
auto x38 = X(1)*x37;
auto x39 = X(8)*x16;
auto x40 = X(2)*x39;
auto x41 = x38 + x40;
auto x42 = -4*X(0)*X(4)*X(7) - 4*X(0)*X(5)*X(8) - x11 + x12 + x13 + x14 + x15 - x18 - x2 - x21 - x23 - x25 + x27 + x29 + x30 + x31 + x36 + x41 - x5 - x8;
auto x43 = X(0)*x16;
auto x44 = X(0)*x19;
auto x45 = 2*X(1);
auto x46 = X(4)*x45;
auto x47 = X(5)*x46;
auto x48 = X(8)*x46;
auto x49 = X(7)*x45;
auto x50 = X(5)*x49;
auto x51 = X(8)*x49;
auto x52 = 2*X(2);
auto x53 = X(5)*x52;
auto x54 = X(8)*x52;
auto x55 = X(6)*x16;
auto x56 = 2*x26;
auto x57 = std::pow(X(0), 2);
auto x58 = std::pow(X(1), 2);
auto x59 = std::pow(X(3), 2);
auto x60 = std::pow(X(6), 2);
auto x61 = std::pow(X(2), 2);
auto x62 = 2*x57;
auto x63 = 2*x59;
auto x64 = X(1)*x63;
auto x65 = 2*x60;
auto x66 = X(1)*x65;
auto x67 = X(1)*x4;
auto x68 = X(1)*x10;
auto x69 = 2*x58;
auto x70 = X(3)*x69;
auto x71 = X(2)*x63;
auto x72 = X(2)*x7;
auto x73 = X(2)*x65;
auto x74 = X(2)*x1;
auto x75 = 2*x61;
auto x76 = X(3)*x75;
auto x77 = -X(0)*x18 - X(0)*x21 - X(0)*x23 - X(0)*x25 + X(0)*x33 + X(0)*x35 + X(0)*x38 + X(0)*x40 - X(2)*x47 + X(2)*x48 + X(2)*x50 - X(2)*x51 - X(3)*x14 - X(3)*x15 - X(4)*x66 - X(4)*x67 - X(5)*x73 - X(5)*x74 - X(6)*x12 - X(6)*x13 + X(6)*x18 + X(6)*x23 + X(6)*x38 + X(6)*x40 - X(6)*x70 - X(6)*x76 - X(7)*x64 - X(7)*x68 - X(8)*x71 - X(8)*x72 + x0*x57 + x0*x59 + x0*x61 + x0*x9 + x26*x43 + x26*x44 + x26*x53 + x26*x54 - x26*x55 - x26*x62 - x26*x75 + x28*x43 + x28*x44 + x28*x46 + x28*x49 - x28*x55 - x28*x56 - x28*x62 - x28*x69 + x3*x57 + x3*x58 + x3*x59 + x3*x6 + x57*x6 + x57*x9 + x58*x59 + x58*x60 + x58*x9 + x59*x61 + x6*x60 + x6*x61 + x60*x61 + x60*x9;
auto x78 = std::pow(x77, -2);
auto x79 = (1.0/4.0)*lambda;
auto x80 = x78*x79;
auto x81 = -4*x26;
auto x82 = -4*x28;
auto x83 = x1 + x4;
auto x84 = x10 + x7;
auto x85 = std::pow(x77, -1);
auto x86 = x85*(x81 + x82 + x83 + x84);
auto x87 = x79*log(x77*(IB(0,0)*IB(1,1) - IB(0,1)*IB(1,0)));
auto x88 = -x42;
auto x89 = x42*x78;
auto x90 = x88*x89;
auto x91 = 2*IB(0,0);
auto x92 = 2*IB(1,1);
auto x93 = 2*IB(0,1) + 2*IB(1,0) + x91 + x92;
auto x94 = (1.0/2.0)*mu;
auto x95 = -x37;
auto x96 = -x32;
auto x97 = x85*(-x17 - x20 - x95 - x96);
auto x98 = X(4)*x65;
auto x99 = X(4)*x4;
auto x100 = X(7)*x63;
auto x101 = X(7)*x10;
auto x102 = X(0)*x17;
auto x103 = X(0)*x20;
auto x104 = X(4)*x53;
auto x105 = X(7)*x54;
auto x106 = X(6)*x17;
auto x107 = X(6)*x37;
auto x108 = 2*x28;
auto x109 = X(4)*x108;
auto x110 = X(7)*x108;
auto x111 = X(0)*x37 + X(7)*x53;
auto x112 = X(0)*x32 + X(4)*x54;
auto x113 = -4*X(1)*X(3)*X(6) - 4*X(1)*X(5)*X(8) - x100 - x101 - x102 - x103 - x104 - x105 + x106 + x107 + x109 + x110 + x111 + x112 + x64 + x66 + x67 + x68 - x98 - x99;
auto x114 = -x113;
auto x115 = x114*x89;
auto x116 = x79*x89;
auto x117 = x113*x116 + x87*x97;
auto x118 = -x39;
auto x119 = -x34;
auto x120 = x85*(-x118 - x119 - x22 - x24);
auto x121 = X(5)*x65;
auto x122 = X(5)*x1;
auto x123 = X(8)*x63;
auto x124 = X(8)*x7;
auto x125 = X(0)*x22;
auto x126 = X(0)*x24;
auto x127 = X(6)*x22;
auto x128 = X(6)*x39;
auto x129 = X(5)*x56;
auto x130 = X(8)*x56;
auto x131 = X(0)*x39 + x48;
auto x132 = X(0)*x34 + x50;
auto x133 = -4*X(2)*X(3)*X(6) - 4*X(2)*X(4)*X(7) - x121 - x122 - x123 - x124 - x125 - x126 + x127 + x128 + x129 + x130 + x131 + x132 - x47 - x51 + x71 + x72 + x73 + x74;
auto x134 = -x133;
auto x135 = x134*x89;
auto x136 = x116*x133 + x120*x87;
auto x137 = X(6)*x69;
auto x138 = X(6)*x75;
auto x139 = X(0)*x46;
auto x140 = X(0)*x53;
auto x141 = X(0)*x49;
auto x142 = X(0)*x54;
auto x143 = X(0)*x108 + X(0)*x56;
auto x144 = -4*X(1)*X(3)*X(7) - 4*X(2)*X(3)*X(8) - x137 - x138 - x139 - x14 - x140 + x141 + x142 + x143 - x15 + x2 + x21 + x25 - x30 - x31 + x36 + x5 + x70 + x76;
auto x145 = -x144;
auto x146 = x145*x89;
auto x147 = -x54;
auto x148 = x147 + x53;
auto x149 = -x108 + x148;
auto x150 = -x49;
auto x151 = x150 + x46;
auto x152 = x151 - x56;
auto x153 = x85*(-x149 - x152 - x83);
auto x154 = IB(0,1) + IB(1,0);
auto x155 = x154 + x91;
auto x156 = x153 + x155;
auto x157 = x116*x144 + x153*x87;
auto x158 = X(1)*x16;
auto x159 = -x158;
auto x160 = 4*X(0);
auto x161 = X(4)*x160;
auto x162 = 4*X(6);
auto x163 = X(4)*x162;
auto x164 = -x163 + x37;
auto x165 = X(7)*x160;
auto x166 = X(1)*x19;
auto x167 = -x165 + x166;
auto x168 = x85*(x159 + x161 + x164 + x167 + x20);
auto x169 = X(7)*x62;
auto x170 = X(7)*x75;
auto x171 = X(4)*x62;
auto x172 = X(4)*x75;
auto x173 = X(0)*x158;
auto x174 = X(5)*x45;
auto x175 = X(2)*x174;
auto x176 = X(0)*x166;
auto x177 = X(8)*x45;
auto x178 = X(2)*x177;
auto x179 = X(6)*x158 + x28*x45;
auto x180 = -4*X(0)*X(4)*X(6) - 4*X(2)*X(4)*X(8) + x103 + x105 - x107 - x110 + x111 - x169 - x170 + x171 + x172 - x173 - x175 + x176 + x178 + x179 - x66 - x67 + x98 + x99;
auto x181 = -x180;
auto x182 = x181*x89;
auto x183 = x116*x180 + x168*x87;
auto x184 = X(2)*x16;
auto x185 = -x184;
auto x186 = X(5)*x160;
auto x187 = X(5)*x162;
auto x188 = -x187 + x39;
auto x189 = X(8)*x160;
auto x190 = X(2)*x19;
auto x191 = -x189 + x190;
auto x192 = x85*(x185 + x186 + x188 + x191 + x24);
auto x193 = X(8)*x62;
auto x194 = X(8)*x69;
auto x195 = X(5)*x62;
auto x196 = X(5)*x69;
auto x197 = X(0)*x184;
auto x198 = X(2)*x46;
auto x199 = X(0)*x190;
auto x200 = X(2)*x49;
auto x201 = X(6)*x184 + x26*x52;
auto x202 = -4*X(0)*X(5)*X(6) - 4*X(1)*X(5)*X(7) + x121 + x122 + x126 - x128 - x130 + x131 - x193 - x194 + x195 + x196 - x197 - x198 + x199 + x200 + x201 + x51 - x73 - x74;
auto x203 = -x202;
auto x204 = x203*x89;
auto x205 = x116*x202 + x192*x87;
auto x206 = -4*X(1)*X(4)*X(6) - 4*X(2)*X(5)*X(6) + x11 - x12 - x13 + x137 + x138 + x139 + x140 - x141 - x142 + x143 + x18 + x23 - x27 - x29 + x41 - x70 - x76 + x8;
auto x207 = -x206;
auto x208 = x207*x89;
auto x209 = x108 + x56;
auto x210 = -x10 + x148;
auto x211 = x151 - x7;
auto x212 = x85*(x209 + x210 + x211);
auto x213 = x154 + x92;
auto x214 = x212 + x213;
auto x215 = x116*x206 + x212*x87;
auto x216 = -x166;
auto x217 = 4*X(3);
auto x218 = X(7)*x217;
auto x219 = -x218 + x32;
auto x220 = x158 - x161;
auto x221 = x85*(x165 + x17 + x216 + x219 + x220);
auto x222 = -4*X(0)*X(3)*X(7) - 4*X(2)*X(5)*X(7) + x100 + x101 + x102 + x104 - x106 - x109 + x112 + x169 + x170 - x171 - x172 + x173 + x175 - x176 - x178 + x179 - x64 - x68;
auto x223 = -x222;
auto x224 = x223*x89;
auto x225 = x116*x222 + x221*x87;
auto x226 = -x190;
auto x227 = X(8)*x217;
auto x228 = -x227 + x34;
auto x229 = x184 - x186;
auto x230 = x85*(x189 + x22 + x226 + x228 + x229);
auto x231 = -4*X(0)*X(3)*X(8) - 4*X(1)*X(4)*X(8) + x123 + x124 + x125 - x127 - x129 + x132 + x193 + x194 - x195 - x196 + x197 + x198 - x199 - x200 + x201 + x47 - x71 - x72;
auto x232 = -x231;
auto x233 = x232*x89;
auto x234 = x116*x231 + x230*x87;
auto x235 = x113*x78;
auto x236 = x235*x88;
auto x237 = -X(3)*x162;
auto x238 = x4 + x65;
auto x239 = x10 + x63;
auto x240 = x85*(x237 + x238 + x239 + x82);
auto x241 = x114*x235;
auto x242 = 2*X(4);
auto x243 = X(5)*x242;
auto x244 = X(8)*x242;
auto x245 = -x244;
auto x246 = 2*X(7);
auto x247 = X(5)*x246;
auto x248 = -x247;
auto x249 = X(8)*x246;
auto x250 = x85*(-x243 - x245 - x248 - x249);
auto x251 = x134*x235;
auto x252 = x235*x79;
auto x253 = x133*x252 + x250*x87;
auto x254 = X(0)*x242;
auto x255 = -x254;
auto x256 = X(1)*x217;
auto x257 = X(1)*x162;
auto x258 = X(0)*x246;
auto x259 = -x257 + x258;
auto x260 = x85*(x20 + x219 + x255 + x256 + x259);
auto x261 = x145*x235;
auto x262 = x144*x252 + x260*x87;
auto x263 = x181*x235;
auto x264 = -x44;
auto x265 = x264 + x43;
auto x266 = x265 - x55;
auto x267 = x85*(-x149 - x238 - x266);
auto x268 = x155 + x267;
auto x269 = x180*x252 + x267*x87;
auto x270 = X(4)*x52;
auto x271 = -x270;
auto x272 = 4*X(1);
auto x273 = X(5)*x272;
auto x274 = 4*X(7);
auto x275 = X(5)*x274;
auto x276 = x244 - x275;
auto x277 = X(8)*x272;
auto x278 = X(7)*x52;
auto x279 = -x277 + x278;
auto x280 = x85*(x249 + x271 + x273 + x276 + x279);
auto x281 = x203*x235;
auto x282 = x202*x252 + x280*x87;
auto x283 = -x258;
auto x284 = x254 - x256;
auto x285 = x85*(x164 + x17 + x257 + x283 + x284);
auto x286 = x207*x235;
auto x287 = x206*x252 + x285*x87;
auto x288 = x223*x235;
auto x289 = x108 + x55;
auto x290 = x265 - x63;
auto x291 = x85*(x210 + x289 + x290);
auto x292 = x213 + x291;
auto x293 = x222*x252 + x291*x87;
auto x294 = -x278;
auto x295 = 4*X(4);
auto x296 = X(8)*x295;
auto x297 = x247 - x296;
auto x298 = x270 - x273;
auto x299 = x85*(x243 + x277 + x294 + x297 + x298);
auto x300 = x232*x235;
auto x301 = x231*x252 + x299*x87;
auto x302 = x133*x78;
auto x303 = x302*x88;
auto x304 = x114*x302;
auto x305 = x1 + x65;
auto x306 = x63 + x7;
auto x307 = x85*(x237 + x305 + x306 + x81);
auto x308 = x134*x302;
auto x309 = 2*X(0);
auto x310 = X(5)*x309;
auto x311 = -x310;
auto x312 = X(2)*x217;
auto x313 = X(2)*x162;
auto x314 = X(8)*x309;
auto x315 = -x313 + x314;
auto x316 = x85*(x228 + x24 + x311 + x312 + x315);
auto x317 = x145*x302;
auto x318 = x302*x79;
auto x319 = x144*x318 + x316*x87;
auto x320 = -x174;
auto x321 = X(2)*x295;
auto x322 = X(2)*x274;
auto x323 = x177 - x322;
auto x324 = x85*(x249 + x297 + x320 + x321 + x323);
auto x325 = x181*x302;
auto x326 = x180*x318 + x324*x87;
auto x327 = x203*x302;
auto x328 = x85*(-x152 - x266 - x305);
auto x329 = x155 + x328;
auto x330 = x202*x318 + x328*x87;
auto x331 = -x314;
auto x332 = x310 - x312;
auto x333 = x85*(x188 + x22 + x313 + x331 + x332);
auto x334 = x207*x302;
auto x335 = x206*x318 + x333*x87;
auto x336 = -x177;
auto x337 = x174 - x321;
auto x338 = x85*(x243 + x276 + x322 + x336 + x337);
auto x339 = x223*x302;
auto x340 = x222*x318 + x338*x87;
auto x341 = x232*x302;
auto x342 = x55 + x56;
auto x343 = x85*(x211 + x290 + x342);
auto x344 = x213 + x343;
auto x345 = x231*x318 + x343*x87;
auto x346 = x144*x78;
auto x347 = x346*x88;
auto x348 = x114*x346;
auto x349 = x134*x346;
auto x350 = 4*X(2);
auto x351 = -X(8)*x350 + x75;
auto x352 = -X(7)*x272 + x69;
auto x353 = x85*(x351 + x352 + x83);
auto x354 = x145*x346;
auto x355 = -x91;
auto x356 = X(0)*x45;
auto x357 = x85*(-x20 - x216 - x283 - x356);
auto x358 = x181*x346;
auto x359 = x346*x79;
auto x360 = x180*x359 + x357*x87;
auto x361 = X(0)*x52;
auto x362 = x85*(-x226 - x24 - x331 - x361);
auto x363 = x203*x346;
auto x364 = x202*x359 + x362*x87;
auto x365 = x207*x346;
auto x366 = x147 - x53 + x75;
auto x367 = x150 - x46 + x69;
auto x368 = x85*(-x209 - x366 - x367);
auto x369 = x154 - x368;
auto x370 = x206*x359 + x368*x87;
auto x371 = x85*(x167 + x218 + x284 + x356 + x96);
auto x372 = x223*x346;
auto x373 = x222*x359 + x371*x87;
auto x374 = x85*(x119 + x191 + x227 + x332 + x361);
auto x375 = x232*x346;
auto x376 = x231*x359 + x374*x87;
auto x377 = x180*x78;
auto x378 = x377*x88;
auto x379 = x114*x377;
auto x380 = x134*x377;
auto x381 = x145*x377;
auto x382 = -X(6)*x160 + x62;
auto x383 = x85*(x238 + x351 + x382);
auto x384 = x181*x377;
auto x385 = X(2)*x45;
auto x386 = x85*(-x249 - x294 - x336 - x385);
auto x387 = x203*x377;
auto x388 = x377*x79;
auto x389 = x202*x388 + x386*x87;
auto x390 = x85*(x163 + x220 + x259 + x356 + x95);
auto x391 = x207*x377;
auto x392 = x206*x388 + x390*x87;
auto x393 = x223*x377;
auto x394 = x264 - x43 + x62;
auto x395 = x85*(-x289 - x366 - x394);
auto x396 = x154 - x395;
auto x397 = x222*x388 + x395*x87;
auto x398 = x85*(x248 + x279 + x296 + x337 + x385);
auto x399 = x232*x377;
auto x400 = x231*x388 + x398*x87;
auto x401 = x202*x78;
auto x402 = x401*x88;
auto x403 = x114*x401;
auto x404 = x134*x401;
auto x405 = x145*x401;
auto x406 = x181*x401;
auto x407 = x85*(x305 + x352 + x382);
auto x408 = x203*x401;
auto x409 = x85*(x118 + x187 + x229 + x315 + x361);
auto x410 = x207*x401;
auto x411 = x401*x79;
auto x412 = x206*x411 + x409*x87;
auto x413 = x85*(x245 + x275 + x298 + x323 + x385);
auto x414 = x223*x401;
auto x415 = x222*x411 + x413*x87;
auto x416 = x232*x401;
auto x417 = x85*(-x342 - x367 - x394);
auto x418 = x154 - x417;
auto x419 = x231*x411 + x417*x87;
auto x420 = x206*x78;
auto x421 = x420*x88;
auto x422 = x114*x420;
auto x423 = x134*x420;
auto x424 = x145*x420;
auto x425 = x181*x420;
auto x426 = x203*x420;
auto x427 = -X(5)*x350 + x75;
auto x428 = -X(4)*x272 + x69;
auto x429 = x85*(x427 + x428 + x84);
auto x430 = x207*x420;
auto x431 = -x92;
auto x432 = x85*(-x159 - x17 - x255 - x356);
auto x433 = x223*x420;
auto x434 = x420*x79;
auto x435 = x222*x434 + x432*x87;
auto x436 = x85*(-x185 - x22 - x311 - x361);
auto x437 = x232*x420;
auto x438 = x231*x434 + x436*x87;
auto x439 = x222*x78;
auto x440 = x439*x88;
auto x441 = x114*x439;
auto x442 = x134*x439;
auto x443 = x145*x439;
auto x444 = x181*x439;
auto x445 = x203*x439;
auto x446 = x207*x439;
auto x447 = -X(3)*x160 + x62;
auto x448 = x85*(x239 + x427 + x447);
auto x449 = x223*x439;
auto x450 = x85*(-x243 - x271 - x320 - x385);
auto x451 = x232*x439;
auto x452 = x231*x439*x79 + x450*x87;
auto x453 = x231*x78;
auto x454 = x453*x88;
auto x455 = x114*x453;
auto x456 = x134*x453;
auto x457 = x145*x453;
auto x458 = x181*x453;
auto x459 = x203*x453;
auto x460 = x207*x453;
auto x461 = x223*x453;
auto x462 = x85*(x306 + x428 + x447);
auto x463 = x232*x453;
/* Simplified Expr */
R(0,0) = std::pow(x42, 2)*x80 + x86*x87 + x87*x90 + x94*(-x86 - x90 + x93);
R(0,1) = x115*x87 + x117 + x94*(-x115 - x97);
R(0,2) = x135*x87 + x136 + x94*(-x120 - x135);
R(0,3) = x146*x87 + x157 + x94*(-x146 - x156);
R(0,4) = x182*x87 + x183 + x94*(-x168 - x182);
R(0,5) = x204*x87 + x205 + x94*(-x192 - x204);
R(0,6) = x208*x87 + x215 + x94*(-x208 - x214);
R(0,7) = x224*x87 + x225 + x94*(-x221 - x224);
R(0,8) = x233*x87 + x234 + x94*(-x230 - x233);
R(1,0) = x117 + x236*x87 + x94*(-x236 - x97);
R(1,1) = std::pow(x113, 2)*x80 + x240*x87 + x241*x87 + x94*(-x240 - x241 + x93);
R(1,2) = x251*x87 + x253 + x94*(-x250 - x251);
R(1,3) = x261*x87 + x262 + x94*(-x260 - x261);
R(1,4) = x263*x87 + x269 + x94*(-x263 - x268);
R(1,5) = x281*x87 + x282 + x94*(-x280 - x281);
R(1,6) = x286*x87 + x287 + x94*(-x285 - x286);
R(1,7) = x288*x87 + x293 + x94*(-x288 - x292);
R(1,8) = x300*x87 + x301 + x94*(-x299 - x300);
R(2,0) = x136 + x303*x87 + x94*(-x120 - x303);
R(2,1) = x253 + x304*x87 + x94*(-x250 - x304);
R(2,2) = std::pow(x133, 2)*x80 + x307*x87 + x308*x87 + x94*(-x307 - x308 + x93);
R(2,3) = x317*x87 + x319 + x94*(-x316 - x317);
R(2,4) = x325*x87 + x326 + x94*(-x324 - x325);
R(2,5) = x327*x87 + x330 + x94*(-x327 - x329);
R(2,6) = x334*x87 + x335 + x94*(-x333 - x334);
R(2,7) = x339*x87 + x340 + x94*(-x338 - x339);
R(2,8) = x341*x87 + x345 + x94*(-x341 - x344);
R(3,0) = x157 + x347*x87 + x94*(-x156 - x347);
R(3,1) = x262 + x348*x87 + x94*(-x260 - x348);
R(3,2) = x319 + x349*x87 + x94*(-x316 - x349);
R(3,3) = std::pow(x144, 2)*x80 + x353*x87 + x354*x87 + x94*(-x353 - x354 - x355);
R(3,4) = x358*x87 + x360 + x94*(-x357 - x358);
R(3,5) = x363*x87 + x364 + x94*(-x362 - x363);
R(3,6) = x365*x87 + x370 + x94*(-x365 + x369);
R(3,7) = x372*x87 + x373 + x94*(-x371 - x372);
R(3,8) = x375*x87 + x376 + x94*(-x374 - x375);
R(4,0) = x183 + x378*x87 + x94*(-x168 - x378);
R(4,1) = x269 + x379*x87 + x94*(-x268 - x379);
R(4,2) = x326 + x380*x87 + x94*(-x324 - x380);
R(4,3) = x360 + x381*x87 + x94*(-x357 - x381);
R(4,4) = std::pow(x180, 2)*x80 + x383*x87 + x384*x87 + x94*(-x355 - x383 - x384);
R(4,5) = x387*x87 + x389 + x94*(-x386 - x387);
R(4,6) = x391*x87 + x392 + x94*(-x390 - x391);
R(4,7) = x393*x87 + x397 + x94*(-x393 + x396);
R(4,8) = x399*x87 + x400 + x94*(-x398 - x399);
R(5,0) = x205 + x402*x87 + x94*(-x192 - x402);
R(5,1) = x282 + x403*x87 + x94*(-x280 - x403);
R(5,2) = x330 + x404*x87 + x94*(-x329 - x404);
R(5,3) = x364 + x405*x87 + x94*(-x362 - x405);
R(5,4) = x389 + x406*x87 + x94*(-x386 - x406);
R(5,5) = std::pow(x202, 2)*x80 + x407*x87 + x408*x87 + x94*(-x355 - x407 - x408);
R(5,6) = x410*x87 + x412 + x94*(-x409 - x410);
R(5,7) = x414*x87 + x415 + x94*(-x413 - x414);
R(5,8) = x416*x87 + x419 + x94*(-x416 + x418);
R(6,0) = x215 + x421*x87 + x94*(-x214 - x421);
R(6,1) = x287 + x422*x87 + x94*(-x285 - x422);
R(6,2) = x335 + x423*x87 + x94*(-x333 - x423);
R(6,3) = x370 + x424*x87 + x94*(x369 - x424);
R(6,4) = x392 + x425*x87 + x94*(-x390 - x425);
R(6,5) = x412 + x426*x87 + x94*(-x409 - x426);
R(6,6) = std::pow(x206, 2)*x80 + x429*x87 + x430*x87 + x94*(-x429 - x430 - x431);
R(6,7) = x433*x87 + x435 + x94*(-x432 - x433);
R(6,8) = x437*x87 + x438 + x94*(-x436 - x437);
R(7,0) = x225 + x440*x87 + x94*(-x221 - x440);
R(7,1) = x293 + x441*x87 + x94*(-x292 - x441);
R(7,2) = x340 + x442*x87 + x94*(-x338 - x442);
R(7,3) = x373 + x443*x87 + x94*(-x371 - x443);
R(7,4) = x397 + x444*x87 + x94*(x396 - x444);
R(7,5) = x415 + x445*x87 + x94*(-x413 - x445);
R(7,6) = x435 + x446*x87 + x94*(-x432 - x446);
R(7,7) = std::pow(x222, 2)*x80 + x448*x87 + x449*x87 + x94*(-x431 - x448 - x449);
R(7,8) = x451*x87 + x452 + x94*(-x450 - x451);
R(8,0) = x234 + x454*x87 + x94*(-x230 - x454);
R(8,1) = x301 + x455*x87 + x94*(-x299 - x455);
R(8,2) = x345 + x456*x87 + x94*(-x344 - x456);
R(8,3) = x376 + x457*x87 + x94*(-x374 - x457);
R(8,4) = x400 + x458*x87 + x94*(-x398 - x458);
R(8,5) = x419 + x459*x87 + x94*(x418 - x459);
R(8,6) = x438 + x460*x87 + x94*(-x436 - x460);
R(8,7) = x452 + x461*x87 + x94*(-x450 - x461);
R(8,8) = std::pow(x231, 2)*x80 + x462*x87 + x463*x87 + x94*(-x431 - x462 - x463);
}
