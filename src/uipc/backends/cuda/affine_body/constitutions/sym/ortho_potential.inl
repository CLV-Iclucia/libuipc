// Affine body Orthogonal Potential

template <typename T>
__host__ __device__ void E(T& R, const T& kappa, const T& v, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa v \left(2 \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right)^{2} + 2 \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)^{2} + 2 \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)^{2} + \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right)^{2} + \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right)^{2} + \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)^{2}\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
v:
    -> {}
    -> Matrix([[v]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
/* Simplified Expr */
R = kappa*v*(2*((q(10)*q(4) + q(11)*q(5) + q(3)*q(9)) * (q(10)*q(4) + q(11)*q(5) + q(3)*q(9))) + 2*((q(10)*q(7) + q(11)*q(8) + q(6)*q(9)) * (q(10)*q(7) + q(11)*q(8) + q(6)*q(9))) + 2*((q(3)*q(6) + q(4)*q(7) + q(5)*q(8)) * (q(3)*q(6) + q(4)*q(7) + q(5)*q(8))) + ((((q(10)) * (q(10))) + ((q(11)) * (q(11))) + ((q(9)) * (q(9))) - 1) * (((q(10)) * (q(10))) + ((q(11)) * (q(11))) + ((q(9)) * (q(9))) - 1)) + ((((q(3)) * (q(3))) + ((q(4)) * (q(4))) + ((q(5)) * (q(5))) - 1) * (((q(3)) * (q(3))) + ((q(4)) * (q(4))) + ((q(5)) * (q(5))) - 1)) + ((((q(6)) * (q(6))) + ((q(7)) * (q(7))) + ((q(8)) * (q(8))) - 1) * (((q(6)) * (q(6))) + ((q(7)) * (q(7))) + ((q(8)) * (q(8))) - 1)));
}
template <typename T>
__host__ __device__ void dEdq(Eigen::Vector<T,9>& R, const T& kappa, const T& v, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa v \left(4 q(3) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(6) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(9) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right)\right)\\\kappa v \left(4 q(10) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(4) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(7) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)\right)\\\kappa v \left(4 q(11) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(5) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(8) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)\right)\\\kappa v \left(4 q(3) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(6) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right) + 4 q(9) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\\\kappa v \left(4 q(10) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(4) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(7) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)\right)\\\kappa v \left(4 q(11) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(5) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(8) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)\right)\\\kappa v \left(4 q(3) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(6) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(9) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right)\right)\\\kappa v \left(4 q(10) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right) + 4 q(4) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(7) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\\\kappa v \left(4 q(11) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right) + 4 q(5) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(8) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
v:
    -> {}
    -> Matrix([[v]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = 4*q(3)*q(6) + 4*q(4)*q(7) + 4*q(5)*q(8);
auto x1 = 4*q(10)*q(4) + 4*q(11)*q(5) + 4*q(3)*q(9);
auto x2 = 4*((q(3)) * (q(3))) + 4*((q(4)) * (q(4))) + 4*((q(5)) * (q(5))) - 4;
auto x3 = kappa*v;
auto x4 = 4*q(10)*q(7) + 4*q(11)*q(8) + 4*q(6)*q(9);
auto x5 = 4*((q(6)) * (q(6))) + 4*((q(7)) * (q(7))) + 4*((q(8)) * (q(8))) - 4;
auto x6 = 4*((q(10)) * (q(10))) + 4*((q(11)) * (q(11))) + 4*((q(9)) * (q(9))) - 4;
/* Simplified Expr */
R(0) = x3*(q(3)*x2 + q(6)*x0 + q(9)*x1);
R(1) = x3*(q(10)*x1 + q(4)*x2 + q(7)*x0);
R(2) = x3*(q(11)*x1 + q(5)*x2 + q(8)*x0);
R(3) = x3*(q(3)*x0 + q(6)*x5 + q(9)*x4);
R(4) = x3*(q(10)*x4 + q(4)*x0 + q(7)*x5);
R(5) = x3*(q(11)*x4 + q(5)*x0 + q(8)*x5);
R(6) = x3*(q(3)*x1 + q(6)*x4 + q(9)*x6);
R(7) = x3*(q(10)*x6 + q(4)*x1 + q(7)*x4);
R(8) = x3*(q(11)*x6 + q(5)*x1 + q(8)*x4);
}
template <typename T>
__host__ __device__ void ddEddq(Eigen::Matrix<T,9,9>& R, const T& kappa, const T& v, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa v \left(12 q(3)^{2} + 4 q(4)^{2} + 4 q(5)^{2} + 4 q(6)^{2} + 4 q(9)^{2} - 4\right) & \kappa v \left(4 q(10) q(9) + 8 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(4 q(11) q(9) + 8 q(3) q(5) + 4 q(6) q(8)\right) & \kappa v \left(8 q(3) q(6) + 4 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(4) q(6) v & 4 \kappa q(5) q(6) v & \kappa v \left(4 q(10) q(4) + 4 q(11) q(5) + 8 q(3) q(9)\right) & 4 \kappa q(4) q(9) v & 4 \kappa q(5) q(9) v\\\kappa v \left(4 q(10) q(9) + 8 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(4 q(10)^{2} + 4 q(3)^{2} + 12 q(4)^{2} + 4 q(5)^{2} + 4 q(7)^{2} - 4\right) & \kappa v \left(4 q(10) q(11) + 8 q(4) q(5) + 4 q(7) q(8)\right) & 4 \kappa q(3) q(7) v & \kappa v \left(4 q(3) q(6) + 8 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(5) q(7) v & 4 \kappa q(10) q(3) v & \kappa v \left(8 q(10) q(4) + 4 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(10) q(5) v\\\kappa v \left(4 q(11) q(9) + 8 q(3) q(5) + 4 q(6) q(8)\right) & \kappa v \left(4 q(10) q(11) + 8 q(4) q(5) + 4 q(7) q(8)\right) & \kappa v \left(4 q(11)^{2} + 4 q(3)^{2} + 4 q(4)^{2} + 12 q(5)^{2} + 4 q(8)^{2} - 4\right) & 4 \kappa q(3) q(8) v & 4 \kappa q(4) q(8) v & \kappa v \left(4 q(3) q(6) + 4 q(4) q(7) + 8 q(5) q(8)\right) & 4 \kappa q(11) q(3) v & 4 \kappa q(11) q(4) v & \kappa v \left(4 q(10) q(4) + 8 q(11) q(5) + 4 q(3) q(9)\right)\\\kappa v \left(8 q(3) q(6) + 4 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(3) q(7) v & 4 \kappa q(3) q(8) v & \kappa v \left(4 q(3)^{2} + 12 q(6)^{2} + 4 q(7)^{2} + 4 q(8)^{2} + 4 q(9)^{2} - 4\right) & \kappa v \left(4 q(10) q(9) + 4 q(3) q(4) + 8 q(6) q(7)\right) & \kappa v \left(4 q(11) q(9) + 4 q(3) q(5) + 8 q(6) q(8)\right) & \kappa v \left(4 q(10) q(7) + 4 q(11) q(8) + 8 q(6) q(9)\right) & 4 \kappa q(7) q(9) v & 4 \kappa q(8) q(9) v\\4 \kappa q(4) q(6) v & \kappa v \left(4 q(3) q(6) + 8 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(4) q(8) v & \kappa v \left(4 q(10) q(9) + 4 q(3) q(4) + 8 q(6) q(7)\right) & \kappa v \left(4 q(10)^{2} + 4 q(4)^{2} + 4 q(6)^{2} + 12 q(7)^{2} + 4 q(8)^{2} - 4\right) & \kappa v \left(4 q(10) q(11) + 4 q(4) q(5) + 8 q(7) q(8)\right) & 4 \kappa q(10) q(6) v & \kappa v \left(8 q(10) q(7) + 4 q(11) q(8) + 4 q(6) q(9)\right) & 4 \kappa q(10) q(8) v\\4 \kappa q(5) q(6) v & 4 \kappa q(5) q(7) v & \kappa v \left(4 q(3) q(6) + 4 q(4) q(7) + 8 q(5) q(8)\right) & \kappa v \left(4 q(11) q(9) + 4 q(3) q(5) + 8 q(6) q(8)\right) & \kappa v \left(4 q(10) q(11) + 4 q(4) q(5) + 8 q(7) q(8)\right) & \kappa v \left(4 q(11)^{2} + 4 q(5)^{2} + 4 q(6)^{2} + 4 q(7)^{2} + 12 q(8)^{2} - 4\right) & 4 \kappa q(11) q(6) v & 4 \kappa q(11) q(7) v & \kappa v \left(4 q(10) q(7) + 8 q(11) q(8) + 4 q(6) q(9)\right)\\\kappa v \left(4 q(10) q(4) + 4 q(11) q(5) + 8 q(3) q(9)\right) & 4 \kappa q(10) q(3) v & 4 \kappa q(11) q(3) v & \kappa v \left(4 q(10) q(7) + 4 q(11) q(8) + 8 q(6) q(9)\right) & 4 \kappa q(10) q(6) v & 4 \kappa q(11) q(6) v & \kappa v \left(4 q(10)^{2} + 4 q(11)^{2} + 4 q(3)^{2} + 4 q(6)^{2} + 12 q(9)^{2} - 4\right) & \kappa v \left(8 q(10) q(9) + 4 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(8 q(11) q(9) + 4 q(3) q(5) + 4 q(6) q(8)\right)\\4 \kappa q(4) q(9) v & \kappa v \left(8 q(10) q(4) + 4 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(11) q(4) v & 4 \kappa q(7) q(9) v & \kappa v \left(8 q(10) q(7) + 4 q(11) q(8) + 4 q(6) q(9)\right) & 4 \kappa q(11) q(7) v & \kappa v \left(8 q(10) q(9) + 4 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(12 q(10)^{2} + 4 q(11)^{2} + 4 q(4)^{2} + 4 q(7)^{2} + 4 q(9)^{2} - 4\right) & \kappa v \left(8 q(10) q(11) + 4 q(4) q(5) + 4 q(7) q(8)\right)\\4 \kappa q(5) q(9) v & 4 \kappa q(10) q(5) v & \kappa v \left(4 q(10) q(4) + 8 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(8) q(9) v & 4 \kappa q(10) q(8) v & \kappa v \left(4 q(10) q(7) + 8 q(11) q(8) + 4 q(6) q(9)\right) & \kappa v \left(8 q(11) q(9) + 4 q(3) q(5) + 4 q(6) q(8)\right) & \kappa v \left(8 q(10) q(11) + 4 q(4) q(5) + 4 q(7) q(8)\right) & \kappa v \left(4 q(10)^{2} + 12 q(11)^{2} + 4 q(5)^{2} + 4 q(8)^{2} + 4 q(9)^{2} - 4\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
v:
    -> {}
    -> Matrix([[v]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = ((q(3)) * (q(3)));
auto x1 = ((q(4)) * (q(4)));
auto x2 = 4*x1;
auto x3 = ((q(6)) * (q(6)));
auto x4 = 4*x3;
auto x5 = x2 + x4;
auto x6 = ((q(9)) * (q(9)));
auto x7 = 4*x6;
auto x8 = ((q(5)) * (q(5)));
auto x9 = 4*x8 - 4;
auto x10 = x7 + x9;
auto x11 = kappa*v;
auto x12 = 4*q(9);
auto x13 = q(10)*x12;
auto x14 = 8*q(3);
auto x15 = 4*q(6);
auto x16 = q(7)*x15;
auto x17 = x11*(q(4)*x14 + x13 + x16);
auto x18 = q(11)*x12;
auto x19 = q(8)*x15;
auto x20 = x11*(q(5)*x14 + x18 + x19);
auto x21 = 4*q(4);
auto x22 = q(7)*x21;
auto x23 = 4*q(5);
auto x24 = q(8)*x23;
auto x25 = x11*(q(6)*x14 + x22 + x24);
auto x26 = x11*x15;
auto x27 = q(4)*x26;
auto x28 = q(5)*x26;
auto x29 = q(10)*x21;
auto x30 = q(11)*x23;
auto x31 = x11*(q(9)*x14 + x29 + x30);
auto x32 = x11*x12;
auto x33 = q(4)*x32;
auto x34 = q(5)*x32;
auto x35 = ((q(10)) * (q(10)));
auto x36 = 4*x35;
auto x37 = 4*x0;
auto x38 = ((q(7)) * (q(7)));
auto x39 = 4*x38;
auto x40 = x37 + x39;
auto x41 = 4*q(10);
auto x42 = q(11)*x41;
auto x43 = 8*q(4);
auto x44 = 4*q(8);
auto x45 = q(7)*x44;
auto x46 = x11*(q(5)*x43 + x42 + x45);
auto x47 = q(7)*x11;
auto x48 = 4*q(3);
auto x49 = x47*x48;
auto x50 = q(3)*x15;
auto x51 = x11*(q(7)*x43 + x24 + x50);
auto x52 = x23*x47;
auto x53 = q(3)*x11;
auto x54 = x41*x53;
auto x55 = q(3)*x12;
auto x56 = x11*(q(10)*x43 + x30 + x55);
auto x57 = q(10)*x11*x23;
auto x58 = ((q(8)) * (q(8)));
auto x59 = 4*x58;
auto x60 = x59 - 4;
auto x61 = ((q(11)) * (q(11)));
auto x62 = 4*x61;
auto x63 = x37 + x62;
auto x64 = x44*x53;
auto x65 = x11*x21;
auto x66 = q(8)*x65;
auto x67 = 8*q(5);
auto x68 = x11*(q(8)*x67 + x22 + x50);
auto x69 = q(11)*x11*x48;
auto x70 = q(11)*x65;
auto x71 = x11*(q(11)*x67 + x29 + x55);
auto x72 = q(3)*x21;
auto x73 = 8*q(6);
auto x74 = x11*(q(7)*x73 + x13 + x72);
auto x75 = q(3)*x23;
auto x76 = x11*(q(8)*x73 + x18 + x75);
auto x77 = q(7)*x41;
auto x78 = q(11)*x44;
auto x79 = x11*(q(9)*x73 + x77 + x78);
auto x80 = q(7)*x32;
auto x81 = q(8)*x32;
auto x82 = q(5)*x21;
auto x83 = 8*q(7);
auto x84 = x11*(q(8)*x83 + x42 + x82);
auto x85 = q(10)*x26;
auto x86 = q(6)*x12;
auto x87 = x11*(q(10)*x83 + x78 + x86);
auto x88 = q(8)*x11*x41;
auto x89 = x39 + x62;
auto x90 = q(11)*x26;
auto x91 = 4*q(11)*x47;
auto x92 = 8*q(11);
auto x93 = x11*(q(8)*x92 + x77 + x86);
auto x94 = x11*(8*q(10)*q(9) + x16 + x72);
auto x95 = x11*(q(9)*x92 + x19 + x75);
auto x96 = x11*(q(10)*x92 + x45 + x82);
/* Simplified Expr */
R(0,0) = x11*(12*x0 + x10 + x5);
R(0,1) = x17;
R(0,2) = x20;
R(0,3) = x25;
R(0,4) = x27;
R(0,5) = x28;
R(0,6) = x31;
R(0,7) = x33;
R(0,8) = x34;
R(1,0) = x17;
R(1,1) = x11*(12*x1 + x36 + x40 + x9);
R(1,2) = x46;
R(1,3) = x49;
R(1,4) = x51;
R(1,5) = x52;
R(1,6) = x54;
R(1,7) = x56;
R(1,8) = x57;
R(2,0) = x20;
R(2,1) = x46;
R(2,2) = x11*(x2 + x60 + x63 + 12*x8);
R(2,3) = x64;
R(2,4) = x66;
R(2,5) = x68;
R(2,6) = x69;
R(2,7) = x70;
R(2,8) = x71;
R(3,0) = x25;
R(3,1) = x49;
R(3,2) = x64;
R(3,3) = x11*(12*x3 + x40 + x60 + x7);
R(3,4) = x74;
R(3,5) = x76;
R(3,6) = x79;
R(3,7) = x80;
R(3,8) = x81;
R(4,0) = x27;
R(4,1) = x51;
R(4,2) = x66;
R(4,3) = x74;
R(4,4) = x11*(x36 + 12*x38 + x5 + x60);
R(4,5) = x84;
R(4,6) = x85;
R(4,7) = x87;
R(4,8) = x88;
R(5,0) = x28;
R(5,1) = x52;
R(5,2) = x68;
R(5,3) = x76;
R(5,4) = x84;
R(5,5) = x11*(x4 + 12*x58 + x89 + x9);
R(5,6) = x90;
R(5,7) = x91;
R(5,8) = x93;
R(6,0) = x31;
R(6,1) = x54;
R(6,2) = x69;
R(6,3) = x79;
R(6,4) = x85;
R(6,5) = x90;
R(6,6) = x11*(x36 + x4 + 12*x6 + x63 - 4);
R(6,7) = x94;
R(6,8) = x95;
R(7,0) = x33;
R(7,1) = x56;
R(7,2) = x70;
R(7,3) = x80;
R(7,4) = x87;
R(7,5) = x91;
R(7,6) = x94;
R(7,7) = x11*(x2 + 12*x35 + x7 + x89 - 4);
R(7,8) = x96;
R(8,0) = x34;
R(8,1) = x57;
R(8,2) = x71;
R(8,3) = x81;
R(8,4) = x88;
R(8,5) = x93;
R(8,6) = x95;
R(8,7) = x96;
R(8,8) = x11*(x10 + x36 + x59 + 12*x61);
}
