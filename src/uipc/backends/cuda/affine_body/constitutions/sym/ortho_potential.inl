// Affine body Orthogonal Potential

template <typename T>
__host__ __device__ void E(T& R, const T& kappa, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa \left(2 \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right)^{2} + 2 \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)^{2} + 2 \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)^{2} + \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right)^{2} + \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right)^{2} + \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)^{2}\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
/* Simplified Expr */
R = kappa*(2*std::pow((q(10)*q(4) + q(11)*q(5) + q(3)*q(9)), (2)) + 2*std::pow((q(10)*q(7) + q(11)*q(8) + q(6)*q(9)), (2)) + 2*std::pow((q(3)*q(6) + q(4)*q(7) + q(5)*q(8)), (2)) + std::pow((std::pow((q(10)), (2)) + std::pow((q(11)), (2)) + std::pow((q(9)), (2)) - 1), (2)) + std::pow((std::pow((q(3)), (2)) + std::pow((q(4)), (2)) + std::pow((q(5)), (2)) - 1), (2)) + std::pow((std::pow((q(6)), (2)) + std::pow((q(7)), (2)) + std::pow((q(8)), (2)) - 1), (2)));
}
template <typename T>
__host__ __device__ void dEdq(Eigen::Vector<T,9>& R, const T& kappa, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa \left(4 q(3) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(6) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(9) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right)\right)\\\kappa \left(4 q(10) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(4) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(7) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)\right)\\\kappa \left(4 q(11) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(5) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(8) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)\right)\\\kappa \left(4 q(3) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(6) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right) + 4 q(9) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\\\kappa \left(4 q(10) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(4) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(7) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)\right)\\\kappa \left(4 q(11) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(5) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(8) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)\right)\\\kappa \left(4 q(3) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(6) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(9) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right)\right)\\\kappa \left(4 q(10) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right) + 4 q(4) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(7) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\\\kappa \left(4 q(11) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right) + 4 q(5) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(8) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = 4*q(3)*q(6) + 4*q(4)*q(7) + 4*q(5)*q(8);
auto x1 = 4*q(10)*q(4) + 4*q(11)*q(5) + 4*q(3)*q(9);
auto x2 = 4*std::pow((q(3)), (2)) + 4*std::pow((q(4)), (2)) + 4*std::pow((q(5)), (2)) - 4;
auto x3 = 4*q(10)*q(7) + 4*q(11)*q(8) + 4*q(6)*q(9);
auto x4 = 4*std::pow((q(6)), (2)) + 4*std::pow((q(7)), (2)) + 4*std::pow((q(8)), (2)) - 4;
auto x5 = 4*std::pow((q(10)), (2)) + 4*std::pow((q(11)), (2)) + 4*std::pow((q(9)), (2)) - 4;
/* Simplified Expr */
R(0) = kappa*(q(3)*x2 + q(6)*x0 + q(9)*x1);
R(1) = kappa*(q(10)*x1 + q(4)*x2 + q(7)*x0);
R(2) = kappa*(q(11)*x1 + q(5)*x2 + q(8)*x0);
R(3) = kappa*(q(3)*x0 + q(6)*x4 + q(9)*x3);
R(4) = kappa*(q(10)*x3 + q(4)*x0 + q(7)*x4);
R(5) = kappa*(q(11)*x3 + q(5)*x0 + q(8)*x4);
R(6) = kappa*(q(3)*x1 + q(6)*x3 + q(9)*x5);
R(7) = kappa*(q(10)*x5 + q(4)*x1 + q(7)*x3);
R(8) = kappa*(q(11)*x5 + q(5)*x1 + q(8)*x3);
}
template <typename T>
__host__ __device__ void ddEddq(Eigen::Matrix<T,9,9>& R, const T& kappa, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa \left(12 q(3)^{2} + 4 q(4)^{2} + 4 q(5)^{2} + 4 q(6)^{2} + 4 q(9)^{2} - 4\right) & \kappa \left(4 q(10) q(9) + 8 q(3) q(4) + 4 q(6) q(7)\right) & \kappa \left(4 q(11) q(9) + 8 q(3) q(5) + 4 q(6) q(8)\right) & \kappa \left(8 q(3) q(6) + 4 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(4) q(6) & 4 \kappa q(5) q(6) & \kappa \left(4 q(10) q(4) + 4 q(11) q(5) + 8 q(3) q(9)\right) & 4 \kappa q(4) q(9) & 4 \kappa q(5) q(9)\\\kappa \left(4 q(10) q(9) + 8 q(3) q(4) + 4 q(6) q(7)\right) & \kappa \left(4 q(10)^{2} + 4 q(3)^{2} + 12 q(4)^{2} + 4 q(5)^{2} + 4 q(7)^{2} - 4\right) & \kappa \left(4 q(10) q(11) + 8 q(4) q(5) + 4 q(7) q(8)\right) & 4 \kappa q(3) q(7) & \kappa \left(4 q(3) q(6) + 8 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(5) q(7) & 4 \kappa q(10) q(3) & \kappa \left(8 q(10) q(4) + 4 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(10) q(5)\\\kappa \left(4 q(11) q(9) + 8 q(3) q(5) + 4 q(6) q(8)\right) & \kappa \left(4 q(10) q(11) + 8 q(4) q(5) + 4 q(7) q(8)\right) & \kappa \left(4 q(11)^{2} + 4 q(3)^{2} + 4 q(4)^{2} + 12 q(5)^{2} + 4 q(8)^{2} - 4\right) & 4 \kappa q(3) q(8) & 4 \kappa q(4) q(8) & \kappa \left(4 q(3) q(6) + 4 q(4) q(7) + 8 q(5) q(8)\right) & 4 \kappa q(11) q(3) & 4 \kappa q(11) q(4) & \kappa \left(4 q(10) q(4) + 8 q(11) q(5) + 4 q(3) q(9)\right)\\\kappa \left(8 q(3) q(6) + 4 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(3) q(7) & 4 \kappa q(3) q(8) & \kappa \left(4 q(3)^{2} + 12 q(6)^{2} + 4 q(7)^{2} + 4 q(8)^{2} + 4 q(9)^{2} - 4\right) & \kappa \left(4 q(10) q(9) + 4 q(3) q(4) + 8 q(6) q(7)\right) & \kappa \left(4 q(11) q(9) + 4 q(3) q(5) + 8 q(6) q(8)\right) & \kappa \left(4 q(10) q(7) + 4 q(11) q(8) + 8 q(6) q(9)\right) & 4 \kappa q(7) q(9) & 4 \kappa q(8) q(9)\\4 \kappa q(4) q(6) & \kappa \left(4 q(3) q(6) + 8 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(4) q(8) & \kappa \left(4 q(10) q(9) + 4 q(3) q(4) + 8 q(6) q(7)\right) & \kappa \left(4 q(10)^{2} + 4 q(4)^{2} + 4 q(6)^{2} + 12 q(7)^{2} + 4 q(8)^{2} - 4\right) & \kappa \left(4 q(10) q(11) + 4 q(4) q(5) + 8 q(7) q(8)\right) & 4 \kappa q(10) q(6) & \kappa \left(8 q(10) q(7) + 4 q(11) q(8) + 4 q(6) q(9)\right) & 4 \kappa q(10) q(8)\\4 \kappa q(5) q(6) & 4 \kappa q(5) q(7) & \kappa \left(4 q(3) q(6) + 4 q(4) q(7) + 8 q(5) q(8)\right) & \kappa \left(4 q(11) q(9) + 4 q(3) q(5) + 8 q(6) q(8)\right) & \kappa \left(4 q(10) q(11) + 4 q(4) q(5) + 8 q(7) q(8)\right) & \kappa \left(4 q(11)^{2} + 4 q(5)^{2} + 4 q(6)^{2} + 4 q(7)^{2} + 12 q(8)^{2} - 4\right) & 4 \kappa q(11) q(6) & 4 \kappa q(11) q(7) & \kappa \left(4 q(10) q(7) + 8 q(11) q(8) + 4 q(6) q(9)\right)\\\kappa \left(4 q(10) q(4) + 4 q(11) q(5) + 8 q(3) q(9)\right) & 4 \kappa q(10) q(3) & 4 \kappa q(11) q(3) & \kappa \left(4 q(10) q(7) + 4 q(11) q(8) + 8 q(6) q(9)\right) & 4 \kappa q(10) q(6) & 4 \kappa q(11) q(6) & \kappa \left(4 q(10)^{2} + 4 q(11)^{2} + 4 q(3)^{2} + 4 q(6)^{2} + 12 q(9)^{2} - 4\right) & \kappa \left(8 q(10) q(9) + 4 q(3) q(4) + 4 q(6) q(7)\right) & \kappa \left(8 q(11) q(9) + 4 q(3) q(5) + 4 q(6) q(8)\right)\\4 \kappa q(4) q(9) & \kappa \left(8 q(10) q(4) + 4 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(11) q(4) & 4 \kappa q(7) q(9) & \kappa \left(8 q(10) q(7) + 4 q(11) q(8) + 4 q(6) q(9)\right) & 4 \kappa q(11) q(7) & \kappa \left(8 q(10) q(9) + 4 q(3) q(4) + 4 q(6) q(7)\right) & \kappa \left(12 q(10)^{2} + 4 q(11)^{2} + 4 q(4)^{2} + 4 q(7)^{2} + 4 q(9)^{2} - 4\right) & \kappa \left(8 q(10) q(11) + 4 q(4) q(5) + 4 q(7) q(8)\right)\\4 \kappa q(5) q(9) & 4 \kappa q(10) q(5) & \kappa \left(4 q(10) q(4) + 8 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(8) q(9) & 4 \kappa q(10) q(8) & \kappa \left(4 q(10) q(7) + 8 q(11) q(8) + 4 q(6) q(9)\right) & \kappa \left(8 q(11) q(9) + 4 q(3) q(5) + 4 q(6) q(8)\right) & \kappa \left(8 q(10) q(11) + 4 q(4) q(5) + 4 q(7) q(8)\right) & \kappa \left(4 q(10)^{2} + 12 q(11)^{2} + 4 q(5)^{2} + 4 q(8)^{2} + 4 q(9)^{2} - 4\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = std::pow((q(3)), (2));
auto x1 = std::pow((q(4)), (2));
auto x2 = 4*x1;
auto x3 = std::pow((q(6)), (2));
auto x4 = 4*x3;
auto x5 = x2 + x4;
auto x6 = std::pow((q(9)), (2));
auto x7 = 4*x6;
auto x8 = std::pow((q(5)), (2));
auto x9 = 4*x8 - 4;
auto x10 = x7 + x9;
auto x11 = 4*q(9);
auto x12 = q(10)*x11;
auto x13 = 8*q(3);
auto x14 = 4*q(6);
auto x15 = q(7)*x14;
auto x16 = kappa*(q(4)*x13 + x12 + x15);
auto x17 = q(11)*x11;
auto x18 = q(8)*x14;
auto x19 = kappa*(q(5)*x13 + x17 + x18);
auto x20 = 4*q(4);
auto x21 = q(7)*x20;
auto x22 = 4*q(5);
auto x23 = q(8)*x22;
auto x24 = kappa*(q(6)*x13 + x21 + x23);
auto x25 = kappa*x14;
auto x26 = q(4)*x25;
auto x27 = q(5)*x25;
auto x28 = q(10)*x20;
auto x29 = q(11)*x22;
auto x30 = kappa*(q(9)*x13 + x28 + x29);
auto x31 = kappa*x11;
auto x32 = q(4)*x31;
auto x33 = q(5)*x31;
auto x34 = std::pow((q(10)), (2));
auto x35 = 4*x34;
auto x36 = 4*x0;
auto x37 = std::pow((q(7)), (2));
auto x38 = 4*x37;
auto x39 = x36 + x38;
auto x40 = 4*q(10);
auto x41 = q(11)*x40;
auto x42 = 8*q(4);
auto x43 = 4*q(8);
auto x44 = q(7)*x43;
auto x45 = kappa*(q(5)*x42 + x41 + x44);
auto x46 = kappa*q(7);
auto x47 = 4*q(3);
auto x48 = x46*x47;
auto x49 = q(3)*x14;
auto x50 = kappa*(q(7)*x42 + x23 + x49);
auto x51 = x22*x46;
auto x52 = kappa*q(3);
auto x53 = x40*x52;
auto x54 = q(3)*x11;
auto x55 = kappa*(q(10)*x42 + x29 + x54);
auto x56 = kappa*q(10)*x22;
auto x57 = std::pow((q(8)), (2));
auto x58 = 4*x57;
auto x59 = x58 - 4;
auto x60 = std::pow((q(11)), (2));
auto x61 = 4*x60;
auto x62 = x36 + x61;
auto x63 = x43*x52;
auto x64 = kappa*x20;
auto x65 = q(8)*x64;
auto x66 = 8*q(5);
auto x67 = kappa*(q(8)*x66 + x21 + x49);
auto x68 = kappa*q(11)*x47;
auto x69 = q(11)*x64;
auto x70 = kappa*(q(11)*x66 + x28 + x54);
auto x71 = q(3)*x20;
auto x72 = 8*q(6);
auto x73 = kappa*(q(7)*x72 + x12 + x71);
auto x74 = q(3)*x22;
auto x75 = kappa*(q(8)*x72 + x17 + x74);
auto x76 = q(7)*x40;
auto x77 = q(11)*x43;
auto x78 = kappa*(q(9)*x72 + x76 + x77);
auto x79 = q(7)*x31;
auto x80 = q(8)*x31;
auto x81 = q(5)*x20;
auto x82 = 8*q(7);
auto x83 = kappa*(q(8)*x82 + x41 + x81);
auto x84 = q(10)*x25;
auto x85 = q(6)*x11;
auto x86 = kappa*(q(10)*x82 + x77 + x85);
auto x87 = kappa*q(8)*x40;
auto x88 = x38 + x61;
auto x89 = q(11)*x25;
auto x90 = 4*q(11)*x46;
auto x91 = 8*q(11);
auto x92 = kappa*(q(8)*x91 + x76 + x85);
auto x93 = kappa*(8*q(10)*q(9) + x15 + x71);
auto x94 = kappa*(q(9)*x91 + x18 + x74);
auto x95 = kappa*(q(10)*x91 + x44 + x81);
/* Simplified Expr */
R(0,0) = kappa*(12*x0 + x10 + x5);
R(0,1) = x16;
R(0,2) = x19;
R(0,3) = x24;
R(0,4) = x26;
R(0,5) = x27;
R(0,6) = x30;
R(0,7) = x32;
R(0,8) = x33;
R(1,0) = x16;
R(1,1) = kappa*(12*x1 + x35 + x39 + x9);
R(1,2) = x45;
R(1,3) = x48;
R(1,4) = x50;
R(1,5) = x51;
R(1,6) = x53;
R(1,7) = x55;
R(1,8) = x56;
R(2,0) = x19;
R(2,1) = x45;
R(2,2) = kappa*(x2 + x59 + x62 + 12*x8);
R(2,3) = x63;
R(2,4) = x65;
R(2,5) = x67;
R(2,6) = x68;
R(2,7) = x69;
R(2,8) = x70;
R(3,0) = x24;
R(3,1) = x48;
R(3,2) = x63;
R(3,3) = kappa*(12*x3 + x39 + x59 + x7);
R(3,4) = x73;
R(3,5) = x75;
R(3,6) = x78;
R(3,7) = x79;
R(3,8) = x80;
R(4,0) = x26;
R(4,1) = x50;
R(4,2) = x65;
R(4,3) = x73;
R(4,4) = kappa*(x35 + 12*x37 + x5 + x59);
R(4,5) = x83;
R(4,6) = x84;
R(4,7) = x86;
R(4,8) = x87;
R(5,0) = x27;
R(5,1) = x51;
R(5,2) = x67;
R(5,3) = x75;
R(5,4) = x83;
R(5,5) = kappa*(x4 + 12*x57 + x88 + x9);
R(5,6) = x89;
R(5,7) = x90;
R(5,8) = x92;
R(6,0) = x30;
R(6,1) = x53;
R(6,2) = x68;
R(6,3) = x78;
R(6,4) = x84;
R(6,5) = x89;
R(6,6) = kappa*(x35 + x4 + 12*x6 + x62 - 4);
R(6,7) = x93;
R(6,8) = x94;
R(7,0) = x32;
R(7,1) = x55;
R(7,2) = x69;
R(7,3) = x79;
R(7,4) = x86;
R(7,5) = x90;
R(7,6) = x93;
R(7,7) = kappa*(x2 + 12*x34 + x7 + x88 - 4);
R(7,8) = x95;
R(8,0) = x33;
R(8,1) = x56;
R(8,2) = x70;
R(8,3) = x80;
R(8,4) = x87;
R(8,5) = x92;
R(8,6) = x94;
R(8,7) = x95;
R(8,8) = kappa*(x10 + x35 + x58 + 12*x60);
}
