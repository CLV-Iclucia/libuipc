// Affine body ARAP Potential
template <typename T>
__host__ __device__ void E(T& R, const T& kappa, const T& v, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa v \left(2 \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right)^{2} + 2 \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)^{2} + 2 \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)^{2} + \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right)^{2} + \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right)^{2} + \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)^{2}\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
v:
    -> {}
    -> Matrix([[v]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
/* Simplified Expr */

Eigen::Matrix<T, 3, 3> F;
for (int i = 0; i < 3; i++)
{
    for (int j = 0; j < 3; j++)
    {
        F(i, j) = q(i * 3 + j + 3);
    }
}

Eigen::Matrix<T, 3, 3> U;
Eigen::Matrix<T, 3, 3> V;
Eigen::Vector<T, 3>    sigma;

muda::eigen::svd(F, U, sigma, V);
R = kappa * v * (F - U*V.transpose()).array().square().sum();

// R = 0;
}
template <typename T>
__host__ __device__ void dEdq(Eigen::Vector<T,9>& R, const T& kappa, const T& v, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa v \left(4 q(3) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(6) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(9) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right)\right)\\\kappa v \left(4 q(10) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(4) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(7) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)\right)\\\kappa v \left(4 q(11) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(5) \left(q(3)^{2} + q(4)^{2} + q(5)^{2} - 1\right) + 4 q(8) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right)\right)\\\kappa v \left(4 q(3) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(6) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right) + 4 q(9) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\\\kappa v \left(4 q(10) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(4) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(7) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)\right)\\\kappa v \left(4 q(11) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(5) \left(q(3) q(6) + q(4) q(7) + q(5) q(8)\right) + 4 q(8) \left(q(6)^{2} + q(7)^{2} + q(8)^{2} - 1\right)\right)\\\kappa v \left(4 q(3) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(6) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right) + 4 q(9) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right)\right)\\\kappa v \left(4 q(10) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right) + 4 q(4) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(7) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\\\kappa v \left(4 q(11) \left(q(10)^{2} + q(11)^{2} + q(9)^{2} - 1\right) + 4 q(5) \left(q(10) q(4) + q(11) q(5) + q(3) q(9)\right) + 4 q(8) \left(q(10) q(7) + q(11) q(8) + q(6) q(9)\right)\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
v:
    -> {}
    -> Matrix([[v]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */
Eigen::Matrix<T, 3, 3> F;
for (int i = 0; i < 3; i++)
{
    for (int j = 0; j < 3; j++)
    {
        F(i, j) = q(i * 3 + j + 3);
    }
}
Eigen::Matrix<T, 3, 3> U;
Eigen::Matrix<T, 3, 3> V;
Eigen::Vector<T, 3>    sigma;

muda::eigen::svd(F, U, sigma, V);
/*
Eigen::JacobiSVD<Eigen::Matrix<T, 3, 3>> svd(F, Eigen::ComputeThinU | Eigen::ComputeThinV);

Eigen::Matrix<T, 3, 3> U     = svd.matrixU();
Eigen::Vector<T, 3>    sigma = svd.singularValues();
Eigen::Matrix<T, 3, 3> V     = svd.matrixV();
R(0)                          = (F - U * V.transpose()).array().square().sum();
*/
// Eigen::Matrix<T, 3, 3> U = svd.matrixU();
// Eigen::Vector<T, 3> sigma = svd.singularValues();
// Eigen::Matrix<T, 3, 3> V = svd.matrixV();

Eigen::Matrix<T, 3, 3> dE = 2 * (F - U*V.transpose());

for (int i = 0; i < 3; i++)
{
    for (int j = 0; j < 3; j++)
    {
        R(i * 3 + j) = kappa * v * dE(i, j);
        // R(i * 3 + j) = 0;
    }
}

}

template <typename T>
__host__ __device__ void ddEddq(Eigen::Matrix<T,9,9>& R, const T& kappa, const T& v, const Eigen::Vector<T,12>& q)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = \left[\begin{matrix}\kappa v \left(12 q(3)^{2} + 4 q(4)^{2} + 4 q(5)^{2} + 4 q(6)^{2} + 4 q(9)^{2} - 4\right) & \kappa v \left(4 q(10) q(9) + 8 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(4 q(11) q(9) + 8 q(3) q(5) + 4 q(6) q(8)\right) & \kappa v \left(8 q(3) q(6) + 4 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(4) q(6) v & 4 \kappa q(5) q(6) v & \kappa v \left(4 q(10) q(4) + 4 q(11) q(5) + 8 q(3) q(9)\right) & 4 \kappa q(4) q(9) v & 4 \kappa q(5) q(9) v\\\kappa v \left(4 q(10) q(9) + 8 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(4 q(10)^{2} + 4 q(3)^{2} + 12 q(4)^{2} + 4 q(5)^{2} + 4 q(7)^{2} - 4\right) & \kappa v \left(4 q(10) q(11) + 8 q(4) q(5) + 4 q(7) q(8)\right) & 4 \kappa q(3) q(7) v & \kappa v \left(4 q(3) q(6) + 8 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(5) q(7) v & 4 \kappa q(10) q(3) v & \kappa v \left(8 q(10) q(4) + 4 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(10) q(5) v\\\kappa v \left(4 q(11) q(9) + 8 q(3) q(5) + 4 q(6) q(8)\right) & \kappa v \left(4 q(10) q(11) + 8 q(4) q(5) + 4 q(7) q(8)\right) & \kappa v \left(4 q(11)^{2} + 4 q(3)^{2} + 4 q(4)^{2} + 12 q(5)^{2} + 4 q(8)^{2} - 4\right) & 4 \kappa q(3) q(8) v & 4 \kappa q(4) q(8) v & \kappa v \left(4 q(3) q(6) + 4 q(4) q(7) + 8 q(5) q(8)\right) & 4 \kappa q(11) q(3) v & 4 \kappa q(11) q(4) v & \kappa v \left(4 q(10) q(4) + 8 q(11) q(5) + 4 q(3) q(9)\right)\\\kappa v \left(8 q(3) q(6) + 4 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(3) q(7) v & 4 \kappa q(3) q(8) v & \kappa v \left(4 q(3)^{2} + 12 q(6)^{2} + 4 q(7)^{2} + 4 q(8)^{2} + 4 q(9)^{2} - 4\right) & \kappa v \left(4 q(10) q(9) + 4 q(3) q(4) + 8 q(6) q(7)\right) & \kappa v \left(4 q(11) q(9) + 4 q(3) q(5) + 8 q(6) q(8)\right) & \kappa v \left(4 q(10) q(7) + 4 q(11) q(8) + 8 q(6) q(9)\right) & 4 \kappa q(7) q(9) v & 4 \kappa q(8) q(9) v\\4 \kappa q(4) q(6) v & \kappa v \left(4 q(3) q(6) + 8 q(4) q(7) + 4 q(5) q(8)\right) & 4 \kappa q(4) q(8) v & \kappa v \left(4 q(10) q(9) + 4 q(3) q(4) + 8 q(6) q(7)\right) & \kappa v \left(4 q(10)^{2} + 4 q(4)^{2} + 4 q(6)^{2} + 12 q(7)^{2} + 4 q(8)^{2} - 4\right) & \kappa v \left(4 q(10) q(11) + 4 q(4) q(5) + 8 q(7) q(8)\right) & 4 \kappa q(10) q(6) v & \kappa v \left(8 q(10) q(7) + 4 q(11) q(8) + 4 q(6) q(9)\right) & 4 \kappa q(10) q(8) v\\4 \kappa q(5) q(6) v & 4 \kappa q(5) q(7) v & \kappa v \left(4 q(3) q(6) + 4 q(4) q(7) + 8 q(5) q(8)\right) & \kappa v \left(4 q(11) q(9) + 4 q(3) q(5) + 8 q(6) q(8)\right) & \kappa v \left(4 q(10) q(11) + 4 q(4) q(5) + 8 q(7) q(8)\right) & \kappa v \left(4 q(11)^{2} + 4 q(5)^{2} + 4 q(6)^{2} + 4 q(7)^{2} + 12 q(8)^{2} - 4\right) & 4 \kappa q(11) q(6) v & 4 \kappa q(11) q(7) v & \kappa v \left(4 q(10) q(7) + 8 q(11) q(8) + 4 q(6) q(9)\right)\\\kappa v \left(4 q(10) q(4) + 4 q(11) q(5) + 8 q(3) q(9)\right) & 4 \kappa q(10) q(3) v & 4 \kappa q(11) q(3) v & \kappa v \left(4 q(10) q(7) + 4 q(11) q(8) + 8 q(6) q(9)\right) & 4 \kappa q(10) q(6) v & 4 \kappa q(11) q(6) v & \kappa v \left(4 q(10)^{2} + 4 q(11)^{2} + 4 q(3)^{2} + 4 q(6)^{2} + 12 q(9)^{2} - 4\right) & \kappa v \left(8 q(10) q(9) + 4 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(8 q(11) q(9) + 4 q(3) q(5) + 4 q(6) q(8)\right)\\4 \kappa q(4) q(9) v & \kappa v \left(8 q(10) q(4) + 4 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(11) q(4) v & 4 \kappa q(7) q(9) v & \kappa v \left(8 q(10) q(7) + 4 q(11) q(8) + 4 q(6) q(9)\right) & 4 \kappa q(11) q(7) v & \kappa v \left(8 q(10) q(9) + 4 q(3) q(4) + 4 q(6) q(7)\right) & \kappa v \left(12 q(10)^{2} + 4 q(11)^{2} + 4 q(4)^{2} + 4 q(7)^{2} + 4 q(9)^{2} - 4\right) & \kappa v \left(8 q(10) q(11) + 4 q(4) q(5) + 4 q(7) q(8)\right)\\4 \kappa q(5) q(9) v & 4 \kappa q(10) q(5) v & \kappa v \left(4 q(10) q(4) + 8 q(11) q(5) + 4 q(3) q(9)\right) & 4 \kappa q(8) q(9) v & 4 \kappa q(10) q(8) v & \kappa v \left(4 q(10) q(7) + 8 q(11) q(8) + 4 q(6) q(9)\right) & \kappa v \left(8 q(11) q(9) + 4 q(3) q(5) + 4 q(6) q(8)\right) & \kappa v \left(8 q(10) q(11) + 4 q(4) q(5) + 4 q(7) q(8)\right) & \kappa v \left(4 q(10)^{2} + 12 q(11)^{2} + 4 q(5)^{2} + 4 q(8)^{2} + 4 q(9)^{2} - 4\right)\end{matrix}\right]$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
v:
    -> {}
    -> Matrix([[v]])
q:
    -> {}
    -> Matrix([[q(0)], [q(1)], [q(2)], [q(3)], [q(4)], [q(5)], [q(6)], [q(7)], [q(8)], [q(9)], [q(10)], [q(11)]])
*****************************************************************************************************************************/
/* Sub Exprs */

Eigen::Matrix<T, 3, 3> F;
for (int i = 0; i < 3; i++)
{
    for (int j = 0; j < 3; j++)
    {
        F(i, j) = q(i * 3 + j + 3);
    }
}

Eigen::Matrix<T, 3, 3> U;
Eigen::Matrix<T, 3, 3> V;
Eigen::Vector<T, 3>    sigma;

muda::eigen::svd(F, U, sigma, V);

Eigen::Matrix<T, 3, 3> E1;
Eigen::Matrix<T, 3, 3> E2;
Eigen::Matrix<T, 3, 3> E3;
E1 << 0, -1, 0,
      1, 0, 0,
      0, 0, 0;
E2 << 0, 0, 0,
      0, 0, -1,
      0, 1, 0;
E3 << 0, 0, -1,
      0, 0, 0,
      1, 0, 0;

T a = 0.7071067811865476;

Eigen::Matrix<T, 3, 3> Q1 = U*E1*V.transpose() * a;
Eigen::Matrix<T, 3, 3> Q2 = U*E2*V.transpose() * a;
Eigen::Matrix<T, 3, 3> Q3 = U*E3*V.transpose() * a;

Eigen::Vector<T, 9> q1;
Eigen::Vector<T, 9> q2;
Eigen::Vector<T, 9> q3;
for (int i = 0; i < 3; i++)
{
    for (int j = 0; j < 3; j++)
    {
        q1(i * 3 + j) = Q1(i, j);
        q2(i * 3 + j) = Q2(i, j);
        q3(i * 3 + j) = Q3(i, j);
    }
}

T lam1 = 2 / (sigma(0) + sigma(1));
T lam2 = 2 / (sigma(1) + sigma(2));
T lam3 = 2 / (sigma(0) + sigma(2));
Eigen::Matrix<T, 9, 9> H1 = lam1 * q1 * q1.transpose() + lam2 * q2 * q2.transpose() + lam3 * q3 * q3.transpose();
R = 2 * kappa * v * (Eigen::Matrix<T, 9, 9>::Identity() - H1);

// R = Eigen::Matrix<T, 9, 9>::Identity();
}
