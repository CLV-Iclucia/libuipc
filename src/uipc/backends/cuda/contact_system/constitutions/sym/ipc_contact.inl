
// > Squared Version
// > D := d*d 
// > DHat := dHat*dHat

template <typename T>
__host__ __device__ void KappaBarrier(T& R, const T& kappa, const T& D, const T& DHat)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = - \kappa \left(D - \hat{D}\right)^{2} \log{\left(\frac{D}{\hat{D}} \right)}$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
D:
    -> {}
    -> Matrix([[D]])
DHat:
    -> {}
    -> Matrix([[DHat]])
*****************************************************************************************************************************/
/* Sub Exprs */
/* Simplified Expr */
R = -kappa*((D - DHat) * (D - DHat))*log(D/DHat);
}
template <typename T>
__host__ __device__ void dKappaBarrierdD(T& R, const T& kappa, const T& D, const T& DHat)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = - \kappa \left(2 D - 2 \hat{D}\right) \log{\left(\frac{D}{\hat{D}} \right)} - \frac{\kappa \left(D - \hat{D}\right)^{2}}{D}$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
D:
    -> {}
    -> Matrix([[D]])
DHat:
    -> {}
    -> Matrix([[DHat]])
*****************************************************************************************************************************/
/* Sub Exprs */
/* Simplified Expr */
R = -kappa*(2*D - 2*DHat)*log(D/DHat) - kappa*((D - DHat) * (D - DHat))/D;
}
template <typename T>
__host__ __device__ void ddKappaBarrierddD(T& R, const T& kappa, const T& D, const T& DHat)
{
/*****************************************************************************************************************************
Function generated by SymEigen.py 
Author: MuGdxy
GitHub: https://github.com/MuGdxy/SymEigen
E-Mail: lxy819469559@gmail.com
******************************************************************************************************************************
LaTeX expression:
//tex:$$R = - 2 \kappa \log{\left(\frac{D}{\hat{D}} \right)} - \frac{2 \kappa \left(2 D - 2 \hat{D}\right)}{D} + \frac{\kappa \left(D - \hat{D}\right)^{2}}{D^{2}}$$

Symbol Name Mapping:
kappa:
    -> {}
    -> Matrix([[kappa]])
D:
    -> {}
    -> Matrix([[D]])
DHat:
    -> {}
    -> Matrix([[DHat]])
*****************************************************************************************************************************/
/* Sub Exprs */
auto x0 = 2*kappa;
/* Simplified Expr */
R = -x0*log(D/DHat) - x0*(2*D - 2*DHat)/D + kappa*((D - DHat) * (D - DHat))/((D) * (D));
}
