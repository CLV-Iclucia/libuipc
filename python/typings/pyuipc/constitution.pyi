import pyuipc.geometry
from typing import ClassVar

AffineBody: ConstitutionType
FiniteElement: ConstitutionType

class AffineBodyConstitution(IConstitution):
    def __init__(self, config: json = ...) -> None: ...
    def apply_to(self, sc: pyuipc.geometry.SimplicialComplex, kappa: float, mass_density: float = ...) -> None: ...
    @staticmethod
    def default_config() -> json: ...

class ConstitutionType:
    __members__: ClassVar[dict] = ...  # read-only
    AffineBody: ClassVar[ConstitutionType] = ...
    FiniteElement: ClassVar[ConstitutionType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ElasticModuli:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def lame(arg0: float, arg1: float) -> ElasticModuli: ...
    def mu(self) -> float: ...
    @staticmethod
    def youngs_poisson(arg0: float, arg1: float) -> ElasticModuli: ...
    @staticmethod
    def youngs_shear(arg0: float, arg1: float) -> ElasticModuli: ...

class FEMConstitution(IConstitution):
    def __init__(self, *args, **kwargs) -> None: ...

class IConstitution:
    def __init__(self, *args, **kwargs) -> None: ...
    def name(self) -> str: ...
    def type(self) -> ConstitutionType: ...
    def uid(self) -> int: ...

class StableNeoHookean(FEMConstitution):
    def __init__(self, config: json = ...) -> None: ...
    def apply_to(self, sc: pyuipc.geometry.SimplicialComplex, moduli: ElasticModuli = ..., mass_density: float = ...) -> None: ...
    @staticmethod
    def default_config() -> json: ...
