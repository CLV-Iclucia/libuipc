import numpy
from . import constitution as constitution, engine as engine, geometry as geometry, world as world
from typing import overload

class Float:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def One() -> float: ...
    @staticmethod
    def Value(arg0: float) -> float: ...
    @staticmethod
    def Zero() -> float: ...
    @staticmethod
    def size_bytes() -> int: ...

class I32:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def One() -> int: ...
    @staticmethod
    def Value(arg0: int) -> int: ...
    @staticmethod
    def Zero() -> int: ...
    @staticmethod
    def size_bytes() -> int: ...

class I64:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def One() -> int: ...
    @staticmethod
    def Value(arg0: int) -> int: ...
    @staticmethod
    def Zero() -> int: ...
    @staticmethod
    def size_bytes() -> int: ...

class IndexT:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def One() -> int: ...
    @staticmethod
    def Value(arg0: int) -> int: ...
    @staticmethod
    def Zero() -> int: ...
    @staticmethod
    def size_bytes() -> int: ...

class Matrix12x12:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Matrix2x2:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Matrix3x3:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Matrix4x4:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Matrix6x6:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Matrix9x9:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class SizeT:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def One() -> int: ...
    @staticmethod
    def Value(arg0: int) -> int: ...
    @staticmethod
    def Zero() -> int: ...
    @staticmethod
    def size_bytes() -> int: ...

class U32:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def One() -> int: ...
    @staticmethod
    def Value(arg0: int) -> int: ...
    @staticmethod
    def Zero() -> int: ...
    @staticmethod
    def size_bytes() -> int: ...

class U64:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def One() -> int: ...
    @staticmethod
    def Value(arg0: int) -> int: ...
    @staticmethod
    def Zero() -> int: ...
    @staticmethod
    def size_bytes() -> int: ...

class Vector12:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: int) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Unit(arg0: int) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitW() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitX() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitY() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitZ() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Vector2:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: int) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Unit(arg0: int) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitX() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitY() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Vector3:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: int) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Unit(arg0: int) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitX() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitY() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitZ() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Vector4:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: int) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Unit(arg0: int) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitW() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitX() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitY() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitZ() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Vector6:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: int) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Unit(arg0: int) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitW() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitX() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitY() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitZ() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

class Vector9:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def Constant(arg0: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Identity() -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: int) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float) -> numpy.ndarray[numpy.float64]: ...
    @overload
    @staticmethod
    def LinSpaced(arg0: float, arg1: float, arg2: float) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Ones() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Random() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Unit(arg0: int) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitW() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitX() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitY() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def UnitZ() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Values(arg0: numpy.ndarray[numpy.float64]) -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def Zero() -> numpy.ndarray[numpy.float64]: ...
    @staticmethod
    def shape() -> tuple[int, int]: ...

def config() -> json: ...
def default_config() -> json: ...
def init(arg0: json) -> None: ...
